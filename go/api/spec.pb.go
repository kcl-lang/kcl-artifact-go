// Copyright The KCL Authors. All rights reserved.
//
// This file defines the request parameters and return structure of the KCL RPC server.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.27.0
// source: spec.proto

package api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Message representing an external package for KCL.
// kcl main.k -E pkg_name=pkg_path
type ExternalPkg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the package.
	PkgName string `protobuf:"bytes,1,opt,name=pkg_name,json=pkgName,proto3" json:"pkg_name,omitempty"`
	// Path of the package.
	PkgPath string `protobuf:"bytes,2,opt,name=pkg_path,json=pkgPath,proto3" json:"pkg_path,omitempty"`
}

func (x *ExternalPkg) Reset() {
	*x = ExternalPkg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spec_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExternalPkg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalPkg) ProtoMessage() {}

func (x *ExternalPkg) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalPkg.ProtoReflect.Descriptor instead.
func (*ExternalPkg) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{0}
}

func (x *ExternalPkg) GetPkgName() string {
	if x != nil {
		return x.PkgName
	}
	return ""
}

func (x *ExternalPkg) GetPkgPath() string {
	if x != nil {
		return x.PkgPath
	}
	return ""
}

// Message representing a key-value argument for KCL.
// kcl main.k -D name=value
type Argument struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the argument.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Value of the argument.
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Argument) Reset() {
	*x = Argument{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spec_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Argument) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Argument) ProtoMessage() {}

func (x *Argument) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Argument.ProtoReflect.Descriptor instead.
func (*Argument) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{1}
}

func (x *Argument) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Argument) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// Message representing an error.
type Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Level of the error (e.g., "Error", "Warning").
	Level string `protobuf:"bytes,1,opt,name=level,proto3" json:"level,omitempty"`
	// Error code. (e.g., "E1001")
	Code string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	// List of error messages.
	Messages []*Message `protobuf:"bytes,3,rep,name=messages,proto3" json:"messages,omitempty"`
}

func (x *Error) Reset() {
	*x = Error{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spec_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Error) ProtoMessage() {}

func (x *Error) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Error.ProtoReflect.Descriptor instead.
func (*Error) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{2}
}

func (x *Error) GetLevel() string {
	if x != nil {
		return x.Level
	}
	return ""
}

func (x *Error) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Error) GetMessages() []*Message {
	if x != nil {
		return x.Messages
	}
	return nil
}

// Message representing a detailed error message with a position.
type Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The error message text.
	Msg string `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
	// The position in the source code where the error occurred.
	Pos *Position `protobuf:"bytes,2,opt,name=pos,proto3" json:"pos,omitempty"`
}

func (x *Message) Reset() {
	*x = Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spec_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{3}
}

func (x *Message) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *Message) GetPos() *Position {
	if x != nil {
		return x.Pos
	}
	return nil
}

// Message for ping request arguments.
type Ping_Args struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value to be sent in the ping request.
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Ping_Args) Reset() {
	*x = Ping_Args{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spec_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ping_Args) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ping_Args) ProtoMessage() {}

func (x *Ping_Args) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ping_Args.ProtoReflect.Descriptor instead.
func (*Ping_Args) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{4}
}

func (x *Ping_Args) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// Message for ping response.
type Ping_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value received in the ping response.
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Ping_Result) Reset() {
	*x = Ping_Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spec_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ping_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ping_Result) ProtoMessage() {}

func (x *Ping_Result) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ping_Result.ProtoReflect.Descriptor instead.
func (*Ping_Result) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{5}
}

func (x *Ping_Result) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// Message for version request arguments. Empty message.
type GetVersion_Args struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetVersion_Args) Reset() {
	*x = GetVersion_Args{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spec_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVersion_Args) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVersion_Args) ProtoMessage() {}

func (x *GetVersion_Args) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVersion_Args.ProtoReflect.Descriptor instead.
func (*GetVersion_Args) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{6}
}

// Message for version response.
type GetVersion_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// KCL version.
	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	// Checksum of the KCL version.
	Checksum string `protobuf:"bytes,2,opt,name=checksum,proto3" json:"checksum,omitempty"`
	// Git Git SHA of the KCL code repo.
	GitSha string `protobuf:"bytes,3,opt,name=git_sha,json=gitSha,proto3" json:"git_sha,omitempty"`
	// Detailed version information as a string.
	VersionInfo string `protobuf:"bytes,4,opt,name=version_info,json=versionInfo,proto3" json:"version_info,omitempty"`
}

func (x *GetVersion_Result) Reset() {
	*x = GetVersion_Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spec_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVersion_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVersion_Result) ProtoMessage() {}

func (x *GetVersion_Result) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVersion_Result.ProtoReflect.Descriptor instead.
func (*GetVersion_Result) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{7}
}

func (x *GetVersion_Result) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *GetVersion_Result) GetChecksum() string {
	if x != nil {
		return x.Checksum
	}
	return ""
}

func (x *GetVersion_Result) GetGitSha() string {
	if x != nil {
		return x.GitSha
	}
	return ""
}

func (x *GetVersion_Result) GetVersionInfo() string {
	if x != nil {
		return x.VersionInfo
	}
	return ""
}

// Message for list method request arguments. Empty message.
type ListMethod_Args struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListMethod_Args) Reset() {
	*x = ListMethod_Args{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spec_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMethod_Args) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMethod_Args) ProtoMessage() {}

func (x *ListMethod_Args) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMethod_Args.ProtoReflect.Descriptor instead.
func (*ListMethod_Args) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{8}
}

// Message for list method response.
type ListMethod_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of available method names.
	MethodNameList []string `protobuf:"bytes,1,rep,name=method_name_list,json=methodNameList,proto3" json:"method_name_list,omitempty"`
}

func (x *ListMethod_Result) Reset() {
	*x = ListMethod_Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spec_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMethod_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMethod_Result) ProtoMessage() {}

func (x *ListMethod_Result) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMethod_Result.ProtoReflect.Descriptor instead.
func (*ListMethod_Result) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{9}
}

func (x *ListMethod_Result) GetMethodNameList() []string {
	if x != nil {
		return x.MethodNameList
	}
	return nil
}

// Message for parse file request arguments.
type ParseFile_Args struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Path of the file to be parsed.
	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	// Source code to be parsed.
	Source string `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	// External packages path.
	ExternalPkgs []*ExternalPkg `protobuf:"bytes,3,rep,name=external_pkgs,json=externalPkgs,proto3" json:"external_pkgs,omitempty"`
}

func (x *ParseFile_Args) Reset() {
	*x = ParseFile_Args{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spec_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParseFile_Args) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParseFile_Args) ProtoMessage() {}

func (x *ParseFile_Args) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParseFile_Args.ProtoReflect.Descriptor instead.
func (*ParseFile_Args) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{10}
}

func (x *ParseFile_Args) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *ParseFile_Args) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *ParseFile_Args) GetExternalPkgs() []*ExternalPkg {
	if x != nil {
		return x.ExternalPkgs
	}
	return nil
}

// Message for parse file response.
type ParseFile_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Abstract Syntax Tree (AST) in JSON format.
	AstJson string `protobuf:"bytes,1,opt,name=ast_json,json=astJson,proto3" json:"ast_json,omitempty"`
	// File dependency paths.
	Deps []string `protobuf:"bytes,2,rep,name=deps,proto3" json:"deps,omitempty"`
	// List of parse errors.
	Errors []*Error `protobuf:"bytes,3,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *ParseFile_Result) Reset() {
	*x = ParseFile_Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spec_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParseFile_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParseFile_Result) ProtoMessage() {}

func (x *ParseFile_Result) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParseFile_Result.ProtoReflect.Descriptor instead.
func (*ParseFile_Result) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{11}
}

func (x *ParseFile_Result) GetAstJson() string {
	if x != nil {
		return x.AstJson
	}
	return ""
}

func (x *ParseFile_Result) GetDeps() []string {
	if x != nil {
		return x.Deps
	}
	return nil
}

func (x *ParseFile_Result) GetErrors() []*Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

// Message for parse program request arguments.
type ParseProgram_Args struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Paths of the program files to be parsed.
	Paths []string `protobuf:"bytes,1,rep,name=paths,proto3" json:"paths,omitempty"`
	// Source codes to be parsed.
	Sources []string `protobuf:"bytes,2,rep,name=sources,proto3" json:"sources,omitempty"`
	// External packages path.
	ExternalPkgs []*ExternalPkg `protobuf:"bytes,3,rep,name=external_pkgs,json=externalPkgs,proto3" json:"external_pkgs,omitempty"`
}

func (x *ParseProgram_Args) Reset() {
	*x = ParseProgram_Args{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spec_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParseProgram_Args) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParseProgram_Args) ProtoMessage() {}

func (x *ParseProgram_Args) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParseProgram_Args.ProtoReflect.Descriptor instead.
func (*ParseProgram_Args) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{12}
}

func (x *ParseProgram_Args) GetPaths() []string {
	if x != nil {
		return x.Paths
	}
	return nil
}

func (x *ParseProgram_Args) GetSources() []string {
	if x != nil {
		return x.Sources
	}
	return nil
}

func (x *ParseProgram_Args) GetExternalPkgs() []*ExternalPkg {
	if x != nil {
		return x.ExternalPkgs
	}
	return nil
}

// Message for parse program response.
type ParseProgram_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Abstract Syntax Tree (AST) in JSON format.
	AstJson string `protobuf:"bytes,1,opt,name=ast_json,json=astJson,proto3" json:"ast_json,omitempty"`
	// Returns the files in the order they should be compiled.
	Paths []string `protobuf:"bytes,2,rep,name=paths,proto3" json:"paths,omitempty"`
	// List of parse errors.
	Errors []*Error `protobuf:"bytes,3,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *ParseProgram_Result) Reset() {
	*x = ParseProgram_Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spec_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParseProgram_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParseProgram_Result) ProtoMessage() {}

func (x *ParseProgram_Result) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParseProgram_Result.ProtoReflect.Descriptor instead.
func (*ParseProgram_Result) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{13}
}

func (x *ParseProgram_Result) GetAstJson() string {
	if x != nil {
		return x.AstJson
	}
	return ""
}

func (x *ParseProgram_Result) GetPaths() []string {
	if x != nil {
		return x.Paths
	}
	return nil
}

func (x *ParseProgram_Result) GetErrors() []*Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

// Message for load package request arguments.
type LoadPackage_Args struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Arguments for parsing the program.
	ParseArgs *ParseProgram_Args `protobuf:"bytes,1,opt,name=parse_args,json=parseArgs,proto3" json:"parse_args,omitempty"`
	// Flag indicating whether to resolve AST.
	ResolveAst bool `protobuf:"varint,2,opt,name=resolve_ast,json=resolveAst,proto3" json:"resolve_ast,omitempty"`
	// Flag indicating whether to load built-in modules.
	LoadBuiltin bool `protobuf:"varint,3,opt,name=load_builtin,json=loadBuiltin,proto3" json:"load_builtin,omitempty"`
	// Flag indicating whether to include AST index.
	WithAstIndex bool `protobuf:"varint,4,opt,name=with_ast_index,json=withAstIndex,proto3" json:"with_ast_index,omitempty"`
}

func (x *LoadPackage_Args) Reset() {
	*x = LoadPackage_Args{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spec_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadPackage_Args) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadPackage_Args) ProtoMessage() {}

func (x *LoadPackage_Args) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadPackage_Args.ProtoReflect.Descriptor instead.
func (*LoadPackage_Args) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{14}
}

func (x *LoadPackage_Args) GetParseArgs() *ParseProgram_Args {
	if x != nil {
		return x.ParseArgs
	}
	return nil
}

func (x *LoadPackage_Args) GetResolveAst() bool {
	if x != nil {
		return x.ResolveAst
	}
	return false
}

func (x *LoadPackage_Args) GetLoadBuiltin() bool {
	if x != nil {
		return x.LoadBuiltin
	}
	return false
}

func (x *LoadPackage_Args) GetWithAstIndex() bool {
	if x != nil {
		return x.WithAstIndex
	}
	return false
}

// Message for load package response.
type LoadPackage_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Program Abstract Syntax Tree (AST) in JSON format.
	Program string `protobuf:"bytes,1,opt,name=program,proto3" json:"program,omitempty"`
	// Returns the files in the order they should be compiled.
	Paths []string `protobuf:"bytes,2,rep,name=paths,proto3" json:"paths,omitempty"`
	// List of parse errors.
	ParseErrors []*Error `protobuf:"bytes,3,rep,name=parse_errors,json=parseErrors,proto3" json:"parse_errors,omitempty"`
	// List of type errors.
	TypeErrors []*Error `protobuf:"bytes,4,rep,name=type_errors,json=typeErrors,proto3" json:"type_errors,omitempty"`
	// Map of scopes with scope index as key.
	Scopes map[string]*Scope `protobuf:"bytes,5,rep,name=scopes,proto3" json:"scopes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Map of symbols with symbol index as key.
	Symbols map[string]*Symbol `protobuf:"bytes,6,rep,name=symbols,proto3" json:"symbols,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Map of node-symbol associations with AST index UUID as key.
	NodeSymbolMap map[string]*SymbolIndex `protobuf:"bytes,7,rep,name=node_symbol_map,json=nodeSymbolMap,proto3" json:"node_symbol_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Map of symbol-node associations with symbol index as key.
	SymbolNodeMap map[string]string `protobuf:"bytes,8,rep,name=symbol_node_map,json=symbolNodeMap,proto3" json:"symbol_node_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Map of fully qualified names with symbol index as key.
	FullyQualifiedNameMap map[string]*SymbolIndex `protobuf:"bytes,9,rep,name=fully_qualified_name_map,json=fullyQualifiedNameMap,proto3" json:"fully_qualified_name_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Map of package scope with package path as key.
	PkgScopeMap map[string]*ScopeIndex `protobuf:"bytes,10,rep,name=pkg_scope_map,json=pkgScopeMap,proto3" json:"pkg_scope_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *LoadPackage_Result) Reset() {
	*x = LoadPackage_Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spec_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadPackage_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadPackage_Result) ProtoMessage() {}

func (x *LoadPackage_Result) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadPackage_Result.ProtoReflect.Descriptor instead.
func (*LoadPackage_Result) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{15}
}

func (x *LoadPackage_Result) GetProgram() string {
	if x != nil {
		return x.Program
	}
	return ""
}

func (x *LoadPackage_Result) GetPaths() []string {
	if x != nil {
		return x.Paths
	}
	return nil
}

func (x *LoadPackage_Result) GetParseErrors() []*Error {
	if x != nil {
		return x.ParseErrors
	}
	return nil
}

func (x *LoadPackage_Result) GetTypeErrors() []*Error {
	if x != nil {
		return x.TypeErrors
	}
	return nil
}

func (x *LoadPackage_Result) GetScopes() map[string]*Scope {
	if x != nil {
		return x.Scopes
	}
	return nil
}

func (x *LoadPackage_Result) GetSymbols() map[string]*Symbol {
	if x != nil {
		return x.Symbols
	}
	return nil
}

func (x *LoadPackage_Result) GetNodeSymbolMap() map[string]*SymbolIndex {
	if x != nil {
		return x.NodeSymbolMap
	}
	return nil
}

func (x *LoadPackage_Result) GetSymbolNodeMap() map[string]string {
	if x != nil {
		return x.SymbolNodeMap
	}
	return nil
}

func (x *LoadPackage_Result) GetFullyQualifiedNameMap() map[string]*SymbolIndex {
	if x != nil {
		return x.FullyQualifiedNameMap
	}
	return nil
}

func (x *LoadPackage_Result) GetPkgScopeMap() map[string]*ScopeIndex {
	if x != nil {
		return x.PkgScopeMap
	}
	return nil
}

// Message for list options response.
type ListOptions_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of available options.
	Options []*OptionHelp `protobuf:"bytes,2,rep,name=options,proto3" json:"options,omitempty"`
}

func (x *ListOptions_Result) Reset() {
	*x = ListOptions_Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spec_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOptions_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOptions_Result) ProtoMessage() {}

func (x *ListOptions_Result) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOptions_Result.ProtoReflect.Descriptor instead.
func (*ListOptions_Result) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{16}
}

func (x *ListOptions_Result) GetOptions() []*OptionHelp {
	if x != nil {
		return x.Options
	}
	return nil
}

// Message representing a help option.
type OptionHelp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the option.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Type of the option.
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	// Flag indicating if the option is required.
	Required bool `protobuf:"varint,3,opt,name=required,proto3" json:"required,omitempty"`
	// Default value of the option.
	DefaultValue string `protobuf:"bytes,4,opt,name=default_value,json=defaultValue,proto3" json:"default_value,omitempty"`
	// Help text for the option.
	Help string `protobuf:"bytes,5,opt,name=help,proto3" json:"help,omitempty"`
}

func (x *OptionHelp) Reset() {
	*x = OptionHelp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spec_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OptionHelp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OptionHelp) ProtoMessage() {}

func (x *OptionHelp) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OptionHelp.ProtoReflect.Descriptor instead.
func (*OptionHelp) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{17}
}

func (x *OptionHelp) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OptionHelp) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *OptionHelp) GetRequired() bool {
	if x != nil {
		return x.Required
	}
	return false
}

func (x *OptionHelp) GetDefaultValue() string {
	if x != nil {
		return x.DefaultValue
	}
	return ""
}

func (x *OptionHelp) GetHelp() string {
	if x != nil {
		return x.Help
	}
	return ""
}

// Message representing a symbol in KCL.
type Symbol struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type of the symbol.
	Ty *KclType `protobuf:"bytes,1,opt,name=ty,proto3" json:"ty,omitempty"`
	// Name of the symbol.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Owner of the symbol.
	Owner *SymbolIndex `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty"`
	// Definition of the symbol.
	Def *SymbolIndex `protobuf:"bytes,4,opt,name=def,proto3" json:"def,omitempty"`
	// Attributes of the symbol.
	Attrs []*SymbolIndex `protobuf:"bytes,5,rep,name=attrs,proto3" json:"attrs,omitempty"`
	// Flag indicating if the symbol is global.
	IsGlobal bool `protobuf:"varint,6,opt,name=is_global,json=isGlobal,proto3" json:"is_global,omitempty"`
}

func (x *Symbol) Reset() {
	*x = Symbol{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spec_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Symbol) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Symbol) ProtoMessage() {}

func (x *Symbol) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Symbol.ProtoReflect.Descriptor instead.
func (*Symbol) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{18}
}

func (x *Symbol) GetTy() *KclType {
	if x != nil {
		return x.Ty
	}
	return nil
}

func (x *Symbol) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Symbol) GetOwner() *SymbolIndex {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *Symbol) GetDef() *SymbolIndex {
	if x != nil {
		return x.Def
	}
	return nil
}

func (x *Symbol) GetAttrs() []*SymbolIndex {
	if x != nil {
		return x.Attrs
	}
	return nil
}

func (x *Symbol) GetIsGlobal() bool {
	if x != nil {
		return x.IsGlobal
	}
	return false
}

// Message representing a scope in KCL.
type Scope struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type of the scope.
	Kind string `protobuf:"bytes,1,opt,name=kind,proto3" json:"kind,omitempty"`
	// Parent scope.
	Parent *ScopeIndex `protobuf:"bytes,2,opt,name=parent,proto3" json:"parent,omitempty"`
	// Owner of the scope.
	Owner *SymbolIndex `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty"`
	// Children of the scope.
	Children []*ScopeIndex `protobuf:"bytes,4,rep,name=children,proto3" json:"children,omitempty"`
	// Definitions in the scope.
	Defs []*SymbolIndex `protobuf:"bytes,5,rep,name=defs,proto3" json:"defs,omitempty"`
}

func (x *Scope) Reset() {
	*x = Scope{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spec_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Scope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Scope) ProtoMessage() {}

func (x *Scope) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Scope.ProtoReflect.Descriptor instead.
func (*Scope) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{19}
}

func (x *Scope) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *Scope) GetParent() *ScopeIndex {
	if x != nil {
		return x.Parent
	}
	return nil
}

func (x *Scope) GetOwner() *SymbolIndex {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *Scope) GetChildren() []*ScopeIndex {
	if x != nil {
		return x.Children
	}
	return nil
}

func (x *Scope) GetDefs() []*SymbolIndex {
	if x != nil {
		return x.Defs
	}
	return nil
}

// Message representing a symbol index.
type SymbolIndex struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Index identifier.
	I uint64 `protobuf:"varint,1,opt,name=i,proto3" json:"i,omitempty"`
	// Global identifier.
	G uint64 `protobuf:"varint,2,opt,name=g,proto3" json:"g,omitempty"`
	// Type of the symbol or scope.
	Kind string `protobuf:"bytes,3,opt,name=kind,proto3" json:"kind,omitempty"`
}

func (x *SymbolIndex) Reset() {
	*x = SymbolIndex{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spec_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SymbolIndex) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SymbolIndex) ProtoMessage() {}

func (x *SymbolIndex) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SymbolIndex.ProtoReflect.Descriptor instead.
func (*SymbolIndex) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{20}
}

func (x *SymbolIndex) GetI() uint64 {
	if x != nil {
		return x.I
	}
	return 0
}

func (x *SymbolIndex) GetG() uint64 {
	if x != nil {
		return x.G
	}
	return 0
}

func (x *SymbolIndex) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

// Message representing a scope index.
type ScopeIndex struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Index identifier.
	I uint64 `protobuf:"varint,1,opt,name=i,proto3" json:"i,omitempty"`
	// Global identifier.
	G uint64 `protobuf:"varint,2,opt,name=g,proto3" json:"g,omitempty"`
	// Type of the scope.
	Kind string `protobuf:"bytes,3,opt,name=kind,proto3" json:"kind,omitempty"`
}

func (x *ScopeIndex) Reset() {
	*x = ScopeIndex{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spec_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScopeIndex) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScopeIndex) ProtoMessage() {}

func (x *ScopeIndex) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScopeIndex.ProtoReflect.Descriptor instead.
func (*ScopeIndex) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{21}
}

func (x *ScopeIndex) GetI() uint64 {
	if x != nil {
		return x.I
	}
	return 0
}

func (x *ScopeIndex) GetG() uint64 {
	if x != nil {
		return x.G
	}
	return 0
}

func (x *ScopeIndex) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

// Message for execute program request arguments.
type ExecProgram_Args struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Working directory.
	WorkDir string `protobuf:"bytes,1,opt,name=work_dir,json=workDir,proto3" json:"work_dir,omitempty"`
	// List of KCL filenames.
	KFilenameList []string `protobuf:"bytes,2,rep,name=k_filename_list,json=kFilenameList,proto3" json:"k_filename_list,omitempty"`
	// List of KCL codes.
	KCodeList []string `protobuf:"bytes,3,rep,name=k_code_list,json=kCodeList,proto3" json:"k_code_list,omitempty"`
	// Arguments for the program.
	Args []*Argument `protobuf:"bytes,4,rep,name=args,proto3" json:"args,omitempty"`
	// Override configurations.
	Overrides []string `protobuf:"bytes,5,rep,name=overrides,proto3" json:"overrides,omitempty"`
	// Flag to disable YAML result.
	DisableYamlResult bool `protobuf:"varint,6,opt,name=disable_yaml_result,json=disableYamlResult,proto3" json:"disable_yaml_result,omitempty"`
	// Flag to print override AST.
	PrintOverrideAst bool `protobuf:"varint,7,opt,name=print_override_ast,json=printOverrideAst,proto3" json:"print_override_ast,omitempty"`
	// Flag for strict range check.
	StrictRangeCheck bool `protobuf:"varint,8,opt,name=strict_range_check,json=strictRangeCheck,proto3" json:"strict_range_check,omitempty"`
	// Flag to disable none values.
	DisableNone bool `protobuf:"varint,9,opt,name=disable_none,json=disableNone,proto3" json:"disable_none,omitempty"`
	// Verbose level.
	Verbose int32 `protobuf:"varint,10,opt,name=verbose,proto3" json:"verbose,omitempty"`
	// Debug level.
	Debug int32 `protobuf:"varint,11,opt,name=debug,proto3" json:"debug,omitempty"`
	// Flag to sort keys in YAML/JSON results.
	SortKeys bool `protobuf:"varint,12,opt,name=sort_keys,json=sortKeys,proto3" json:"sort_keys,omitempty"`
	// External packages path.
	ExternalPkgs []*ExternalPkg `protobuf:"bytes,13,rep,name=external_pkgs,json=externalPkgs,proto3" json:"external_pkgs,omitempty"`
	// Flag to include schema type path in results.
	IncludeSchemaTypePath bool `protobuf:"varint,14,opt,name=include_schema_type_path,json=includeSchemaTypePath,proto3" json:"include_schema_type_path,omitempty"`
	// Flag to compile only without execution.
	CompileOnly bool `protobuf:"varint,15,opt,name=compile_only,json=compileOnly,proto3" json:"compile_only,omitempty"`
	// Flag to show hidden attributes.
	ShowHidden bool `protobuf:"varint,16,opt,name=show_hidden,json=showHidden,proto3" json:"show_hidden,omitempty"`
	// Path selectors for results.
	PathSelector []string `protobuf:"bytes,17,rep,name=path_selector,json=pathSelector,proto3" json:"path_selector,omitempty"`
	// Flag for fast evaluation.
	FastEval bool `protobuf:"varint,18,opt,name=fast_eval,json=fastEval,proto3" json:"fast_eval,omitempty"`
}

func (x *ExecProgram_Args) Reset() {
	*x = ExecProgram_Args{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spec_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecProgram_Args) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecProgram_Args) ProtoMessage() {}

func (x *ExecProgram_Args) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecProgram_Args.ProtoReflect.Descriptor instead.
func (*ExecProgram_Args) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{22}
}

func (x *ExecProgram_Args) GetWorkDir() string {
	if x != nil {
		return x.WorkDir
	}
	return ""
}

func (x *ExecProgram_Args) GetKFilenameList() []string {
	if x != nil {
		return x.KFilenameList
	}
	return nil
}

func (x *ExecProgram_Args) GetKCodeList() []string {
	if x != nil {
		return x.KCodeList
	}
	return nil
}

func (x *ExecProgram_Args) GetArgs() []*Argument {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *ExecProgram_Args) GetOverrides() []string {
	if x != nil {
		return x.Overrides
	}
	return nil
}

func (x *ExecProgram_Args) GetDisableYamlResult() bool {
	if x != nil {
		return x.DisableYamlResult
	}
	return false
}

func (x *ExecProgram_Args) GetPrintOverrideAst() bool {
	if x != nil {
		return x.PrintOverrideAst
	}
	return false
}

func (x *ExecProgram_Args) GetStrictRangeCheck() bool {
	if x != nil {
		return x.StrictRangeCheck
	}
	return false
}

func (x *ExecProgram_Args) GetDisableNone() bool {
	if x != nil {
		return x.DisableNone
	}
	return false
}

func (x *ExecProgram_Args) GetVerbose() int32 {
	if x != nil {
		return x.Verbose
	}
	return 0
}

func (x *ExecProgram_Args) GetDebug() int32 {
	if x != nil {
		return x.Debug
	}
	return 0
}

func (x *ExecProgram_Args) GetSortKeys() bool {
	if x != nil {
		return x.SortKeys
	}
	return false
}

func (x *ExecProgram_Args) GetExternalPkgs() []*ExternalPkg {
	if x != nil {
		return x.ExternalPkgs
	}
	return nil
}

func (x *ExecProgram_Args) GetIncludeSchemaTypePath() bool {
	if x != nil {
		return x.IncludeSchemaTypePath
	}
	return false
}

func (x *ExecProgram_Args) GetCompileOnly() bool {
	if x != nil {
		return x.CompileOnly
	}
	return false
}

func (x *ExecProgram_Args) GetShowHidden() bool {
	if x != nil {
		return x.ShowHidden
	}
	return false
}

func (x *ExecProgram_Args) GetPathSelector() []string {
	if x != nil {
		return x.PathSelector
	}
	return nil
}

func (x *ExecProgram_Args) GetFastEval() bool {
	if x != nil {
		return x.FastEval
	}
	return false
}

// Message for execute program response.
type ExecProgram_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Result in JSON format.
	JsonResult string `protobuf:"bytes,1,opt,name=json_result,json=jsonResult,proto3" json:"json_result,omitempty"`
	// Result in YAML format.
	YamlResult string `protobuf:"bytes,2,opt,name=yaml_result,json=yamlResult,proto3" json:"yaml_result,omitempty"`
	// Log message from execution.
	LogMessage string `protobuf:"bytes,3,opt,name=log_message,json=logMessage,proto3" json:"log_message,omitempty"`
	// Error message from execution.
	ErrMessage string `protobuf:"bytes,4,opt,name=err_message,json=errMessage,proto3" json:"err_message,omitempty"`
}

func (x *ExecProgram_Result) Reset() {
	*x = ExecProgram_Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spec_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecProgram_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecProgram_Result) ProtoMessage() {}

func (x *ExecProgram_Result) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecProgram_Result.ProtoReflect.Descriptor instead.
func (*ExecProgram_Result) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{23}
}

func (x *ExecProgram_Result) GetJsonResult() string {
	if x != nil {
		return x.JsonResult
	}
	return ""
}

func (x *ExecProgram_Result) GetYamlResult() string {
	if x != nil {
		return x.YamlResult
	}
	return ""
}

func (x *ExecProgram_Result) GetLogMessage() string {
	if x != nil {
		return x.LogMessage
	}
	return ""
}

func (x *ExecProgram_Result) GetErrMessage() string {
	if x != nil {
		return x.ErrMessage
	}
	return ""
}

// Message for build program request arguments.
type BuildProgram_Args struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Arguments for executing the program.
	ExecArgs *ExecProgram_Args `protobuf:"bytes,1,opt,name=exec_args,json=execArgs,proto3" json:"exec_args,omitempty"`
	// Output path.
	Output string `protobuf:"bytes,2,opt,name=output,proto3" json:"output,omitempty"`
}

func (x *BuildProgram_Args) Reset() {
	*x = BuildProgram_Args{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spec_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildProgram_Args) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildProgram_Args) ProtoMessage() {}

func (x *BuildProgram_Args) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildProgram_Args.ProtoReflect.Descriptor instead.
func (*BuildProgram_Args) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{24}
}

func (x *BuildProgram_Args) GetExecArgs() *ExecProgram_Args {
	if x != nil {
		return x.ExecArgs
	}
	return nil
}

func (x *BuildProgram_Args) GetOutput() string {
	if x != nil {
		return x.Output
	}
	return ""
}

// Message for build program response.
type BuildProgram_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Path of the built program.
	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *BuildProgram_Result) Reset() {
	*x = BuildProgram_Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spec_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildProgram_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildProgram_Result) ProtoMessage() {}

func (x *BuildProgram_Result) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildProgram_Result.ProtoReflect.Descriptor instead.
func (*BuildProgram_Result) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{25}
}

func (x *BuildProgram_Result) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

// Message for execute artifact request arguments.
type ExecArtifact_Args struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Path of the artifact.
	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	// Arguments for executing the program.
	ExecArgs *ExecProgram_Args `protobuf:"bytes,2,opt,name=exec_args,json=execArgs,proto3" json:"exec_args,omitempty"`
}

func (x *ExecArtifact_Args) Reset() {
	*x = ExecArtifact_Args{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spec_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecArtifact_Args) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecArtifact_Args) ProtoMessage() {}

func (x *ExecArtifact_Args) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecArtifact_Args.ProtoReflect.Descriptor instead.
func (*ExecArtifact_Args) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{26}
}

func (x *ExecArtifact_Args) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *ExecArtifact_Args) GetExecArgs() *ExecProgram_Args {
	if x != nil {
		return x.ExecArgs
	}
	return nil
}

// Message for format code request arguments.
type FormatCode_Args struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Source code to be formatted.
	Source string `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
}

func (x *FormatCode_Args) Reset() {
	*x = FormatCode_Args{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spec_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FormatCode_Args) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FormatCode_Args) ProtoMessage() {}

func (x *FormatCode_Args) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FormatCode_Args.ProtoReflect.Descriptor instead.
func (*FormatCode_Args) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{27}
}

func (x *FormatCode_Args) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

// Message for format code response.
type FormatCode_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Formatted code as bytes.
	Formatted []byte `protobuf:"bytes,1,opt,name=formatted,proto3" json:"formatted,omitempty"`
}

func (x *FormatCode_Result) Reset() {
	*x = FormatCode_Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spec_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FormatCode_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FormatCode_Result) ProtoMessage() {}

func (x *FormatCode_Result) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FormatCode_Result.ProtoReflect.Descriptor instead.
func (*FormatCode_Result) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{28}
}

func (x *FormatCode_Result) GetFormatted() []byte {
	if x != nil {
		return x.Formatted
	}
	return nil
}

// Message for format file path request arguments.
type FormatPath_Args struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Path of the file to format.
	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *FormatPath_Args) Reset() {
	*x = FormatPath_Args{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spec_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FormatPath_Args) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FormatPath_Args) ProtoMessage() {}

func (x *FormatPath_Args) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FormatPath_Args.ProtoReflect.Descriptor instead.
func (*FormatPath_Args) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{29}
}

func (x *FormatPath_Args) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

// Message for format file path response.
type FormatPath_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of changed file paths.
	ChangedPaths []string `protobuf:"bytes,1,rep,name=changed_paths,json=changedPaths,proto3" json:"changed_paths,omitempty"`
}

func (x *FormatPath_Result) Reset() {
	*x = FormatPath_Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spec_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FormatPath_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FormatPath_Result) ProtoMessage() {}

func (x *FormatPath_Result) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FormatPath_Result.ProtoReflect.Descriptor instead.
func (*FormatPath_Result) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{30}
}

func (x *FormatPath_Result) GetChangedPaths() []string {
	if x != nil {
		return x.ChangedPaths
	}
	return nil
}

// Message for lint file path request arguments.
type LintPath_Args struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Paths of the files to lint.
	Paths []string `protobuf:"bytes,1,rep,name=paths,proto3" json:"paths,omitempty"`
}

func (x *LintPath_Args) Reset() {
	*x = LintPath_Args{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spec_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LintPath_Args) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LintPath_Args) ProtoMessage() {}

func (x *LintPath_Args) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LintPath_Args.ProtoReflect.Descriptor instead.
func (*LintPath_Args) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{31}
}

func (x *LintPath_Args) GetPaths() []string {
	if x != nil {
		return x.Paths
	}
	return nil
}

// Message for lint file path response.
type LintPath_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of lint results.
	Results []string `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *LintPath_Result) Reset() {
	*x = LintPath_Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spec_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LintPath_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LintPath_Result) ProtoMessage() {}

func (x *LintPath_Result) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LintPath_Result.ProtoReflect.Descriptor instead.
func (*LintPath_Result) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{32}
}

func (x *LintPath_Result) GetResults() []string {
	if x != nil {
		return x.Results
	}
	return nil
}

// Message for override file request arguments.
type OverrideFile_Args struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Path of the file to override.
	File string `protobuf:"bytes,1,opt,name=file,proto3" json:"file,omitempty"`
	// List of override specifications.
	Specs []string `protobuf:"bytes,2,rep,name=specs,proto3" json:"specs,omitempty"`
	// List of import paths.
	ImportPaths []string `protobuf:"bytes,3,rep,name=import_paths,json=importPaths,proto3" json:"import_paths,omitempty"`
}

func (x *OverrideFile_Args) Reset() {
	*x = OverrideFile_Args{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spec_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OverrideFile_Args) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OverrideFile_Args) ProtoMessage() {}

func (x *OverrideFile_Args) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OverrideFile_Args.ProtoReflect.Descriptor instead.
func (*OverrideFile_Args) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{33}
}

func (x *OverrideFile_Args) GetFile() string {
	if x != nil {
		return x.File
	}
	return ""
}

func (x *OverrideFile_Args) GetSpecs() []string {
	if x != nil {
		return x.Specs
	}
	return nil
}

func (x *OverrideFile_Args) GetImportPaths() []string {
	if x != nil {
		return x.ImportPaths
	}
	return nil
}

// Message for override file response.
type OverrideFile_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Result of the override operation.
	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	// List of parse errors encountered.
	ParseErrors []*Error `protobuf:"bytes,2,rep,name=parse_errors,json=parseErrors,proto3" json:"parse_errors,omitempty"`
}

func (x *OverrideFile_Result) Reset() {
	*x = OverrideFile_Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spec_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OverrideFile_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OverrideFile_Result) ProtoMessage() {}

func (x *OverrideFile_Result) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OverrideFile_Result.ProtoReflect.Descriptor instead.
func (*OverrideFile_Result) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{34}
}

func (x *OverrideFile_Result) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *OverrideFile_Result) GetParseErrors() []*Error {
	if x != nil {
		return x.ParseErrors
	}
	return nil
}

// Message for list variables options.
type ListVariables_Options struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Flag to merge program configuration.
	MergeProgram bool `protobuf:"varint,1,opt,name=merge_program,json=mergeProgram,proto3" json:"merge_program,omitempty"`
}

func (x *ListVariables_Options) Reset() {
	*x = ListVariables_Options{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spec_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListVariables_Options) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVariables_Options) ProtoMessage() {}

func (x *ListVariables_Options) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVariables_Options.ProtoReflect.Descriptor instead.
func (*ListVariables_Options) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{35}
}

func (x *ListVariables_Options) GetMergeProgram() bool {
	if x != nil {
		return x.MergeProgram
	}
	return false
}

// Message representing a list of variables.
type VariableList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of variables.
	Variables []*Variable `protobuf:"bytes,1,rep,name=variables,proto3" json:"variables,omitempty"`
}

func (x *VariableList) Reset() {
	*x = VariableList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spec_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VariableList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VariableList) ProtoMessage() {}

func (x *VariableList) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VariableList.ProtoReflect.Descriptor instead.
func (*VariableList) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{36}
}

func (x *VariableList) GetVariables() []*Variable {
	if x != nil {
		return x.Variables
	}
	return nil
}

// Message for list variables request arguments.
type ListVariables_Args struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Files to be processed.
	Files []string `protobuf:"bytes,1,rep,name=files,proto3" json:"files,omitempty"`
	// Specifications for variables.
	Specs []string `protobuf:"bytes,2,rep,name=specs,proto3" json:"specs,omitempty"`
	// Options for listing variables.
	Options *ListVariables_Options `protobuf:"bytes,3,opt,name=options,proto3" json:"options,omitempty"`
}

func (x *ListVariables_Args) Reset() {
	*x = ListVariables_Args{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spec_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListVariables_Args) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVariables_Args) ProtoMessage() {}

func (x *ListVariables_Args) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVariables_Args.ProtoReflect.Descriptor instead.
func (*ListVariables_Args) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{37}
}

func (x *ListVariables_Args) GetFiles() []string {
	if x != nil {
		return x.Files
	}
	return nil
}

func (x *ListVariables_Args) GetSpecs() []string {
	if x != nil {
		return x.Specs
	}
	return nil
}

func (x *ListVariables_Args) GetOptions() *ListVariables_Options {
	if x != nil {
		return x.Options
	}
	return nil
}

// Message for list variables response.
type ListVariables_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Map of variable lists by file.
	Variables map[string]*VariableList `protobuf:"bytes,1,rep,name=variables,proto3" json:"variables,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// List of unsupported codes.
	UnsupportedCodes []string `protobuf:"bytes,2,rep,name=unsupported_codes,json=unsupportedCodes,proto3" json:"unsupported_codes,omitempty"`
	// List of parse errors encountered.
	ParseErrors []*Error `protobuf:"bytes,3,rep,name=parse_errors,json=parseErrors,proto3" json:"parse_errors,omitempty"`
}

func (x *ListVariables_Result) Reset() {
	*x = ListVariables_Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spec_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListVariables_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVariables_Result) ProtoMessage() {}

func (x *ListVariables_Result) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVariables_Result.ProtoReflect.Descriptor instead.
func (*ListVariables_Result) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{38}
}

func (x *ListVariables_Result) GetVariables() map[string]*VariableList {
	if x != nil {
		return x.Variables
	}
	return nil
}

func (x *ListVariables_Result) GetUnsupportedCodes() []string {
	if x != nil {
		return x.UnsupportedCodes
	}
	return nil
}

func (x *ListVariables_Result) GetParseErrors() []*Error {
	if x != nil {
		return x.ParseErrors
	}
	return nil
}

// Message representing a variable.
type Variable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value of the variable.
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Type name of the variable.
	TypeName string `protobuf:"bytes,2,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`
	// Operation symbol associated with the variable.
	OpSym string `protobuf:"bytes,3,opt,name=op_sym,json=opSym,proto3" json:"op_sym,omitempty"`
	// List items if the variable is a list.
	ListItems []*Variable `protobuf:"bytes,4,rep,name=list_items,json=listItems,proto3" json:"list_items,omitempty"`
	// Dictionary entries if the variable is a dictionary.
	DictEntries []*MapEntry `protobuf:"bytes,5,rep,name=dict_entries,json=dictEntries,proto3" json:"dict_entries,omitempty"`
}

func (x *Variable) Reset() {
	*x = Variable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spec_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Variable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Variable) ProtoMessage() {}

func (x *Variable) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Variable.ProtoReflect.Descriptor instead.
func (*Variable) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{39}
}

func (x *Variable) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *Variable) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *Variable) GetOpSym() string {
	if x != nil {
		return x.OpSym
	}
	return ""
}

func (x *Variable) GetListItems() []*Variable {
	if x != nil {
		return x.ListItems
	}
	return nil
}

func (x *Variable) GetDictEntries() []*MapEntry {
	if x != nil {
		return x.DictEntries
	}
	return nil
}

// Message representing a map entry.
type MapEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key of the map entry.
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Value of the map entry.
	Value *Variable `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *MapEntry) Reset() {
	*x = MapEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spec_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapEntry) ProtoMessage() {}

func (x *MapEntry) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapEntry.ProtoReflect.Descriptor instead.
func (*MapEntry) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{40}
}

func (x *MapEntry) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *MapEntry) GetValue() *Variable {
	if x != nil {
		return x.Value
	}
	return nil
}

// Message for get schema type mapping request arguments.
type GetSchemaTypeMapping_Args struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Arguments for executing the program.
	ExecArgs *ExecProgram_Args `protobuf:"bytes,1,opt,name=exec_args,json=execArgs,proto3" json:"exec_args,omitempty"`
	// Name of the schema.
	SchemaName string `protobuf:"bytes,2,opt,name=schema_name,json=schemaName,proto3" json:"schema_name,omitempty"`
}

func (x *GetSchemaTypeMapping_Args) Reset() {
	*x = GetSchemaTypeMapping_Args{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spec_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSchemaTypeMapping_Args) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSchemaTypeMapping_Args) ProtoMessage() {}

func (x *GetSchemaTypeMapping_Args) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSchemaTypeMapping_Args.ProtoReflect.Descriptor instead.
func (*GetSchemaTypeMapping_Args) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{41}
}

func (x *GetSchemaTypeMapping_Args) GetExecArgs() *ExecProgram_Args {
	if x != nil {
		return x.ExecArgs
	}
	return nil
}

func (x *GetSchemaTypeMapping_Args) GetSchemaName() string {
	if x != nil {
		return x.SchemaName
	}
	return ""
}

// Message for get schema type mapping response.
type GetSchemaTypeMapping_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Map of schema type mappings.
	SchemaTypeMapping map[string]*KclType `protobuf:"bytes,1,rep,name=schema_type_mapping,json=schemaTypeMapping,proto3" json:"schema_type_mapping,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetSchemaTypeMapping_Result) Reset() {
	*x = GetSchemaTypeMapping_Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spec_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSchemaTypeMapping_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSchemaTypeMapping_Result) ProtoMessage() {}

func (x *GetSchemaTypeMapping_Result) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSchemaTypeMapping_Result.ProtoReflect.Descriptor instead.
func (*GetSchemaTypeMapping_Result) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{42}
}

func (x *GetSchemaTypeMapping_Result) GetSchemaTypeMapping() map[string]*KclType {
	if x != nil {
		return x.SchemaTypeMapping
	}
	return nil
}

// Message for get schema type mapping response.
type GetSchemaTypeMappingUnderPath_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Map of pkg and schema types mappings.
	SchemaTypeMapping map[string]*SchemaTypes `protobuf:"bytes,1,rep,name=schema_type_mapping,json=schemaTypeMapping,proto3" json:"schema_type_mapping,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetSchemaTypeMappingUnderPath_Result) Reset() {
	*x = GetSchemaTypeMappingUnderPath_Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spec_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSchemaTypeMappingUnderPath_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSchemaTypeMappingUnderPath_Result) ProtoMessage() {}

func (x *GetSchemaTypeMappingUnderPath_Result) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSchemaTypeMappingUnderPath_Result.ProtoReflect.Descriptor instead.
func (*GetSchemaTypeMappingUnderPath_Result) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{43}
}

func (x *GetSchemaTypeMappingUnderPath_Result) GetSchemaTypeMapping() map[string]*SchemaTypes {
	if x != nil {
		return x.SchemaTypeMapping
	}
	return nil
}

type SchemaTypes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of schema type mappings.
	SchemaType []*KclType `protobuf:"bytes,1,rep,name=schema_type,json=schemaType,proto3" json:"schema_type,omitempty"`
}

func (x *SchemaTypes) Reset() {
	*x = SchemaTypes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spec_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SchemaTypes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchemaTypes) ProtoMessage() {}

func (x *SchemaTypes) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchemaTypes.ProtoReflect.Descriptor instead.
func (*SchemaTypes) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{44}
}

func (x *SchemaTypes) GetSchemaType() []*KclType {
	if x != nil {
		return x.SchemaType
	}
	return nil
}

// Message for validate code request arguments.
type ValidateCode_Args struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Path to the data file.
	Datafile string `protobuf:"bytes,1,opt,name=datafile,proto3" json:"datafile,omitempty"`
	// Data content.
	Data string `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	// Path to the code file.
	File string `protobuf:"bytes,3,opt,name=file,proto3" json:"file,omitempty"`
	// Source code content.
	Code string `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`
	// Name of the schema.
	Schema string `protobuf:"bytes,5,opt,name=schema,proto3" json:"schema,omitempty"`
	// Name of the attribute.
	AttributeName string `protobuf:"bytes,6,opt,name=attribute_name,json=attributeName,proto3" json:"attribute_name,omitempty"`
	// Format of the validation (e.g., "json", "yaml").
	Format string `protobuf:"bytes,7,opt,name=format,proto3" json:"format,omitempty"`
}

func (x *ValidateCode_Args) Reset() {
	*x = ValidateCode_Args{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spec_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateCode_Args) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateCode_Args) ProtoMessage() {}

func (x *ValidateCode_Args) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateCode_Args.ProtoReflect.Descriptor instead.
func (*ValidateCode_Args) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{45}
}

func (x *ValidateCode_Args) GetDatafile() string {
	if x != nil {
		return x.Datafile
	}
	return ""
}

func (x *ValidateCode_Args) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *ValidateCode_Args) GetFile() string {
	if x != nil {
		return x.File
	}
	return ""
}

func (x *ValidateCode_Args) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *ValidateCode_Args) GetSchema() string {
	if x != nil {
		return x.Schema
	}
	return ""
}

func (x *ValidateCode_Args) GetAttributeName() string {
	if x != nil {
		return x.AttributeName
	}
	return ""
}

func (x *ValidateCode_Args) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

// Message for validate code response.
type ValidateCode_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Flag indicating if validation was successful.
	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	// Error message from validation.
	ErrMessage string `protobuf:"bytes,2,opt,name=err_message,json=errMessage,proto3" json:"err_message,omitempty"`
}

func (x *ValidateCode_Result) Reset() {
	*x = ValidateCode_Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spec_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateCode_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateCode_Result) ProtoMessage() {}

func (x *ValidateCode_Result) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateCode_Result.ProtoReflect.Descriptor instead.
func (*ValidateCode_Result) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{46}
}

func (x *ValidateCode_Result) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ValidateCode_Result) GetErrMessage() string {
	if x != nil {
		return x.ErrMessage
	}
	return ""
}

// Message representing a position in the source code.
type Position struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Line number.
	Line int64 `protobuf:"varint,1,opt,name=line,proto3" json:"line,omitempty"`
	// Column number.
	Column int64 `protobuf:"varint,2,opt,name=column,proto3" json:"column,omitempty"`
	// Filename the position refers to.
	Filename string `protobuf:"bytes,3,opt,name=filename,proto3" json:"filename,omitempty"`
}

func (x *Position) Reset() {
	*x = Position{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spec_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Position) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Position) ProtoMessage() {}

func (x *Position) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Position.ProtoReflect.Descriptor instead.
func (*Position) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{47}
}

func (x *Position) GetLine() int64 {
	if x != nil {
		return x.Line
	}
	return 0
}

func (x *Position) GetColumn() int64 {
	if x != nil {
		return x.Column
	}
	return 0
}

func (x *Position) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

// Message for list dependency files request arguments.
type ListDepFiles_Args struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Working directory.
	WorkDir string `protobuf:"bytes,1,opt,name=work_dir,json=workDir,proto3" json:"work_dir,omitempty"`
	// Flag to use absolute paths.
	UseAbsPath bool `protobuf:"varint,2,opt,name=use_abs_path,json=useAbsPath,proto3" json:"use_abs_path,omitempty"`
	// Flag to include all files.
	IncludeAll bool `protobuf:"varint,3,opt,name=include_all,json=includeAll,proto3" json:"include_all,omitempty"`
	// Flag to use fast parser.
	UseFastParser bool `protobuf:"varint,4,opt,name=use_fast_parser,json=useFastParser,proto3" json:"use_fast_parser,omitempty"`
}

func (x *ListDepFiles_Args) Reset() {
	*x = ListDepFiles_Args{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spec_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDepFiles_Args) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDepFiles_Args) ProtoMessage() {}

func (x *ListDepFiles_Args) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDepFiles_Args.ProtoReflect.Descriptor instead.
func (*ListDepFiles_Args) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{48}
}

func (x *ListDepFiles_Args) GetWorkDir() string {
	if x != nil {
		return x.WorkDir
	}
	return ""
}

func (x *ListDepFiles_Args) GetUseAbsPath() bool {
	if x != nil {
		return x.UseAbsPath
	}
	return false
}

func (x *ListDepFiles_Args) GetIncludeAll() bool {
	if x != nil {
		return x.IncludeAll
	}
	return false
}

func (x *ListDepFiles_Args) GetUseFastParser() bool {
	if x != nil {
		return x.UseFastParser
	}
	return false
}

// Message for list dependency files response.
type ListDepFiles_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Root package path.
	Pkgroot string `protobuf:"bytes,1,opt,name=pkgroot,proto3" json:"pkgroot,omitempty"`
	// Package path.
	Pkgpath string `protobuf:"bytes,2,opt,name=pkgpath,proto3" json:"pkgpath,omitempty"`
	// List of file paths in the package.
	Files []string `protobuf:"bytes,3,rep,name=files,proto3" json:"files,omitempty"`
}

func (x *ListDepFiles_Result) Reset() {
	*x = ListDepFiles_Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spec_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDepFiles_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDepFiles_Result) ProtoMessage() {}

func (x *ListDepFiles_Result) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDepFiles_Result.ProtoReflect.Descriptor instead.
func (*ListDepFiles_Result) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{49}
}

func (x *ListDepFiles_Result) GetPkgroot() string {
	if x != nil {
		return x.Pkgroot
	}
	return ""
}

func (x *ListDepFiles_Result) GetPkgpath() string {
	if x != nil {
		return x.Pkgpath
	}
	return ""
}

func (x *ListDepFiles_Result) GetFiles() []string {
	if x != nil {
		return x.Files
	}
	return nil
}

// Message for load settings files request arguments.
type LoadSettingsFiles_Args struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Working directory.
	WorkDir string `protobuf:"bytes,1,opt,name=work_dir,json=workDir,proto3" json:"work_dir,omitempty"`
	// Setting files to load.
	Files []string `protobuf:"bytes,2,rep,name=files,proto3" json:"files,omitempty"`
}

func (x *LoadSettingsFiles_Args) Reset() {
	*x = LoadSettingsFiles_Args{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spec_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadSettingsFiles_Args) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadSettingsFiles_Args) ProtoMessage() {}

func (x *LoadSettingsFiles_Args) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadSettingsFiles_Args.ProtoReflect.Descriptor instead.
func (*LoadSettingsFiles_Args) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{50}
}

func (x *LoadSettingsFiles_Args) GetWorkDir() string {
	if x != nil {
		return x.WorkDir
	}
	return ""
}

func (x *LoadSettingsFiles_Args) GetFiles() []string {
	if x != nil {
		return x.Files
	}
	return nil
}

// Message for load settings files response.
type LoadSettingsFiles_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// KCL CLI configuration.
	KclCliConfigs *CliConfig `protobuf:"bytes,1,opt,name=kcl_cli_configs,json=kclCliConfigs,proto3" json:"kcl_cli_configs,omitempty"`
	// List of KCL options as key-value pairs.
	KclOptions []*KeyValuePair `protobuf:"bytes,2,rep,name=kcl_options,json=kclOptions,proto3" json:"kcl_options,omitempty"`
}

func (x *LoadSettingsFiles_Result) Reset() {
	*x = LoadSettingsFiles_Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spec_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadSettingsFiles_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadSettingsFiles_Result) ProtoMessage() {}

func (x *LoadSettingsFiles_Result) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadSettingsFiles_Result.ProtoReflect.Descriptor instead.
func (*LoadSettingsFiles_Result) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{51}
}

func (x *LoadSettingsFiles_Result) GetKclCliConfigs() *CliConfig {
	if x != nil {
		return x.KclCliConfigs
	}
	return nil
}

func (x *LoadSettingsFiles_Result) GetKclOptions() []*KeyValuePair {
	if x != nil {
		return x.KclOptions
	}
	return nil
}

// Message representing KCL CLI configuration.
type CliConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of files.
	Files []string `protobuf:"bytes,1,rep,name=files,proto3" json:"files,omitempty"`
	// Output path.
	Output string `protobuf:"bytes,2,opt,name=output,proto3" json:"output,omitempty"`
	// List of overrides.
	Overrides []string `protobuf:"bytes,3,rep,name=overrides,proto3" json:"overrides,omitempty"`
	// Path selectors.
	PathSelector []string `protobuf:"bytes,4,rep,name=path_selector,json=pathSelector,proto3" json:"path_selector,omitempty"`
	// Flag for strict range check.
	StrictRangeCheck bool `protobuf:"varint,5,opt,name=strict_range_check,json=strictRangeCheck,proto3" json:"strict_range_check,omitempty"`
	// Flag to disable none values.
	DisableNone bool `protobuf:"varint,6,opt,name=disable_none,json=disableNone,proto3" json:"disable_none,omitempty"`
	// Verbose level.
	Verbose int64 `protobuf:"varint,7,opt,name=verbose,proto3" json:"verbose,omitempty"`
	// Debug flag.
	Debug bool `protobuf:"varint,8,opt,name=debug,proto3" json:"debug,omitempty"`
	// Flag to sort keys in YAML/JSON results.
	SortKeys bool `protobuf:"varint,9,opt,name=sort_keys,json=sortKeys,proto3" json:"sort_keys,omitempty"`
	// Flag to show hidden attributes.
	ShowHidden bool `protobuf:"varint,10,opt,name=show_hidden,json=showHidden,proto3" json:"show_hidden,omitempty"`
	// Flag to include schema type path in results.
	IncludeSchemaTypePath bool `protobuf:"varint,11,opt,name=include_schema_type_path,json=includeSchemaTypePath,proto3" json:"include_schema_type_path,omitempty"`
	// Flag for fast evaluation.
	FastEval bool `protobuf:"varint,12,opt,name=fast_eval,json=fastEval,proto3" json:"fast_eval,omitempty"`
}

func (x *CliConfig) Reset() {
	*x = CliConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spec_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CliConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CliConfig) ProtoMessage() {}

func (x *CliConfig) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CliConfig.ProtoReflect.Descriptor instead.
func (*CliConfig) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{52}
}

func (x *CliConfig) GetFiles() []string {
	if x != nil {
		return x.Files
	}
	return nil
}

func (x *CliConfig) GetOutput() string {
	if x != nil {
		return x.Output
	}
	return ""
}

func (x *CliConfig) GetOverrides() []string {
	if x != nil {
		return x.Overrides
	}
	return nil
}

func (x *CliConfig) GetPathSelector() []string {
	if x != nil {
		return x.PathSelector
	}
	return nil
}

func (x *CliConfig) GetStrictRangeCheck() bool {
	if x != nil {
		return x.StrictRangeCheck
	}
	return false
}

func (x *CliConfig) GetDisableNone() bool {
	if x != nil {
		return x.DisableNone
	}
	return false
}

func (x *CliConfig) GetVerbose() int64 {
	if x != nil {
		return x.Verbose
	}
	return 0
}

func (x *CliConfig) GetDebug() bool {
	if x != nil {
		return x.Debug
	}
	return false
}

func (x *CliConfig) GetSortKeys() bool {
	if x != nil {
		return x.SortKeys
	}
	return false
}

func (x *CliConfig) GetShowHidden() bool {
	if x != nil {
		return x.ShowHidden
	}
	return false
}

func (x *CliConfig) GetIncludeSchemaTypePath() bool {
	if x != nil {
		return x.IncludeSchemaTypePath
	}
	return false
}

func (x *CliConfig) GetFastEval() bool {
	if x != nil {
		return x.FastEval
	}
	return false
}

// Message representing a key-value pair.
type KeyValuePair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key of the pair.
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Value of the pair.
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *KeyValuePair) Reset() {
	*x = KeyValuePair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spec_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyValuePair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyValuePair) ProtoMessage() {}

func (x *KeyValuePair) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyValuePair.ProtoReflect.Descriptor instead.
func (*KeyValuePair) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{53}
}

func (x *KeyValuePair) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *KeyValuePair) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// Message for rename request arguments.
type Rename_Args struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// File path to the package root.
	PackageRoot string `protobuf:"bytes,1,opt,name=package_root,json=packageRoot,proto3" json:"package_root,omitempty"`
	// Path to the target symbol to be renamed.
	SymbolPath string `protobuf:"bytes,2,opt,name=symbol_path,json=symbolPath,proto3" json:"symbol_path,omitempty"`
	// Paths to the source code files.
	FilePaths []string `protobuf:"bytes,3,rep,name=file_paths,json=filePaths,proto3" json:"file_paths,omitempty"`
	// New name of the symbol.
	NewName string `protobuf:"bytes,4,opt,name=new_name,json=newName,proto3" json:"new_name,omitempty"`
}

func (x *Rename_Args) Reset() {
	*x = Rename_Args{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spec_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rename_Args) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rename_Args) ProtoMessage() {}

func (x *Rename_Args) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rename_Args.ProtoReflect.Descriptor instead.
func (*Rename_Args) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{54}
}

func (x *Rename_Args) GetPackageRoot() string {
	if x != nil {
		return x.PackageRoot
	}
	return ""
}

func (x *Rename_Args) GetSymbolPath() string {
	if x != nil {
		return x.SymbolPath
	}
	return ""
}

func (x *Rename_Args) GetFilePaths() []string {
	if x != nil {
		return x.FilePaths
	}
	return nil
}

func (x *Rename_Args) GetNewName() string {
	if x != nil {
		return x.NewName
	}
	return ""
}

// Message for rename response.
type Rename_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of file paths that got changed.
	ChangedFiles []string `protobuf:"bytes,1,rep,name=changed_files,json=changedFiles,proto3" json:"changed_files,omitempty"`
}

func (x *Rename_Result) Reset() {
	*x = Rename_Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spec_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rename_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rename_Result) ProtoMessage() {}

func (x *Rename_Result) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rename_Result.ProtoReflect.Descriptor instead.
func (*Rename_Result) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{55}
}

func (x *Rename_Result) GetChangedFiles() []string {
	if x != nil {
		return x.ChangedFiles
	}
	return nil
}

// Message for rename code request arguments.
type RenameCode_Args struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// File path to the package root.
	PackageRoot string `protobuf:"bytes,1,opt,name=package_root,json=packageRoot,proto3" json:"package_root,omitempty"`
	// Path to the target symbol to be renamed.
	SymbolPath string `protobuf:"bytes,2,opt,name=symbol_path,json=symbolPath,proto3" json:"symbol_path,omitempty"`
	// Map of source code with filename as key and code as value.
	SourceCodes map[string]string `protobuf:"bytes,3,rep,name=source_codes,json=sourceCodes,proto3" json:"source_codes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// New name of the symbol.
	NewName string `protobuf:"bytes,4,opt,name=new_name,json=newName,proto3" json:"new_name,omitempty"`
}

func (x *RenameCode_Args) Reset() {
	*x = RenameCode_Args{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spec_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenameCode_Args) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenameCode_Args) ProtoMessage() {}

func (x *RenameCode_Args) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenameCode_Args.ProtoReflect.Descriptor instead.
func (*RenameCode_Args) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{56}
}

func (x *RenameCode_Args) GetPackageRoot() string {
	if x != nil {
		return x.PackageRoot
	}
	return ""
}

func (x *RenameCode_Args) GetSymbolPath() string {
	if x != nil {
		return x.SymbolPath
	}
	return ""
}

func (x *RenameCode_Args) GetSourceCodes() map[string]string {
	if x != nil {
		return x.SourceCodes
	}
	return nil
}

func (x *RenameCode_Args) GetNewName() string {
	if x != nil {
		return x.NewName
	}
	return ""
}

// Message for rename code response.
type RenameCode_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Map of changed code with filename as key and modified code as value.
	ChangedCodes map[string]string `protobuf:"bytes,1,rep,name=changed_codes,json=changedCodes,proto3" json:"changed_codes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RenameCode_Result) Reset() {
	*x = RenameCode_Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spec_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenameCode_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenameCode_Result) ProtoMessage() {}

func (x *RenameCode_Result) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenameCode_Result.ProtoReflect.Descriptor instead.
func (*RenameCode_Result) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{57}
}

func (x *RenameCode_Result) GetChangedCodes() map[string]string {
	if x != nil {
		return x.ChangedCodes
	}
	return nil
}

// Message for test request arguments.
type Test_Args struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Execution program arguments.
	ExecArgs *ExecProgram_Args `protobuf:"bytes,1,opt,name=exec_args,json=execArgs,proto3" json:"exec_args,omitempty"`
	// List of KCL package paths to be tested.
	PkgList []string `protobuf:"bytes,2,rep,name=pkg_list,json=pkgList,proto3" json:"pkg_list,omitempty"`
	// Regular expression for filtering tests to run.
	RunRegexp string `protobuf:"bytes,3,opt,name=run_regexp,json=runRegexp,proto3" json:"run_regexp,omitempty"`
	// Flag to stop the test run on the first failure.
	FailFast bool `protobuf:"varint,4,opt,name=fail_fast,json=failFast,proto3" json:"fail_fast,omitempty"`
}

func (x *Test_Args) Reset() {
	*x = Test_Args{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spec_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Test_Args) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Test_Args) ProtoMessage() {}

func (x *Test_Args) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Test_Args.ProtoReflect.Descriptor instead.
func (*Test_Args) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{58}
}

func (x *Test_Args) GetExecArgs() *ExecProgram_Args {
	if x != nil {
		return x.ExecArgs
	}
	return nil
}

func (x *Test_Args) GetPkgList() []string {
	if x != nil {
		return x.PkgList
	}
	return nil
}

func (x *Test_Args) GetRunRegexp() string {
	if x != nil {
		return x.RunRegexp
	}
	return ""
}

func (x *Test_Args) GetFailFast() bool {
	if x != nil {
		return x.FailFast
	}
	return false
}

// Message for test response.
type Test_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of test case information.
	Info []*TestCaseInfo `protobuf:"bytes,2,rep,name=info,proto3" json:"info,omitempty"`
}

func (x *Test_Result) Reset() {
	*x = Test_Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spec_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Test_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Test_Result) ProtoMessage() {}

func (x *Test_Result) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Test_Result.ProtoReflect.Descriptor instead.
func (*Test_Result) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{59}
}

func (x *Test_Result) GetInfo() []*TestCaseInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

// Message representing information about a single test case.
type TestCaseInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the test case.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Error message if any.
	Error string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// Duration of the test case in microseconds.
	Duration uint64 `protobuf:"varint,3,opt,name=duration,proto3" json:"duration,omitempty"`
	// Log message from the test case.
	LogMessage string `protobuf:"bytes,4,opt,name=log_message,json=logMessage,proto3" json:"log_message,omitempty"`
}

func (x *TestCaseInfo) Reset() {
	*x = TestCaseInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spec_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestCaseInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestCaseInfo) ProtoMessage() {}

func (x *TestCaseInfo) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestCaseInfo.ProtoReflect.Descriptor instead.
func (*TestCaseInfo) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{60}
}

func (x *TestCaseInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TestCaseInfo) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *TestCaseInfo) GetDuration() uint64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *TestCaseInfo) GetLogMessage() string {
	if x != nil {
		return x.LogMessage
	}
	return ""
}

// Message for update dependencies request arguments.
type UpdateDependencies_Args struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Path to the manifest file.
	ManifestPath string `protobuf:"bytes,1,opt,name=manifest_path,json=manifestPath,proto3" json:"manifest_path,omitempty"`
	// Flag to vendor dependencies locally.
	Vendor bool `protobuf:"varint,2,opt,name=vendor,proto3" json:"vendor,omitempty"`
}

func (x *UpdateDependencies_Args) Reset() {
	*x = UpdateDependencies_Args{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spec_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDependencies_Args) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDependencies_Args) ProtoMessage() {}

func (x *UpdateDependencies_Args) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDependencies_Args.ProtoReflect.Descriptor instead.
func (*UpdateDependencies_Args) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{61}
}

func (x *UpdateDependencies_Args) GetManifestPath() string {
	if x != nil {
		return x.ManifestPath
	}
	return ""
}

func (x *UpdateDependencies_Args) GetVendor() bool {
	if x != nil {
		return x.Vendor
	}
	return false
}

// Message for update dependencies response.
type UpdateDependencies_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of external packages updated.
	ExternalPkgs []*ExternalPkg `protobuf:"bytes,3,rep,name=external_pkgs,json=externalPkgs,proto3" json:"external_pkgs,omitempty"`
}

func (x *UpdateDependencies_Result) Reset() {
	*x = UpdateDependencies_Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spec_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDependencies_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDependencies_Result) ProtoMessage() {}

func (x *UpdateDependencies_Result) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDependencies_Result.ProtoReflect.Descriptor instead.
func (*UpdateDependencies_Result) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{62}
}

func (x *UpdateDependencies_Result) GetExternalPkgs() []*ExternalPkg {
	if x != nil {
		return x.ExternalPkgs
	}
	return nil
}

// Message representing a KCL type.
type KclType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type name (e.g., schema, dict, list, str, int, float, bool, any, union, number_multiplier).
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// Union types if applicable.
	UnionTypes []*KclType `protobuf:"bytes,2,rep,name=union_types,json=unionTypes,proto3" json:"union_types,omitempty"`
	// Default value of the type.
	Default string `protobuf:"bytes,3,opt,name=default,proto3" json:"default,omitempty"`
	// Name of the schema if applicable.
	SchemaName string `protobuf:"bytes,4,opt,name=schema_name,json=schemaName,proto3" json:"schema_name,omitempty"`
	// Documentation for the schema.
	SchemaDoc string `protobuf:"bytes,5,opt,name=schema_doc,json=schemaDoc,proto3" json:"schema_doc,omitempty"`
	// Properties of the schema as a map with property name as key.
	Properties map[string]*KclType `protobuf:"bytes,6,rep,name=properties,proto3" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// List of required schema properties.
	Required []string `protobuf:"bytes,7,rep,name=required,proto3" json:"required,omitempty"`
	// Key type if the KclType is a dictionary.
	Key *KclType `protobuf:"bytes,8,opt,name=key,proto3" json:"key,omitempty"`
	// Item type if the KclType is a list or dictionary.
	Item *KclType `protobuf:"bytes,9,opt,name=item,proto3" json:"item,omitempty"`
	// Line number where the type is defined.
	Line int32 `protobuf:"varint,10,opt,name=line,proto3" json:"line,omitempty"`
	// List of decorators for the schema.
	Decorators []*Decorator `protobuf:"bytes,11,rep,name=decorators,proto3" json:"decorators,omitempty"`
	// Absolute path of the file where the attribute is located.
	Filename string `protobuf:"bytes,12,opt,name=filename,proto3" json:"filename,omitempty"`
	// Path of the package where the attribute is located.
	PkgPath string `protobuf:"bytes,13,opt,name=pkg_path,json=pkgPath,proto3" json:"pkg_path,omitempty"`
	// Documentation for the attribute.
	Description string `protobuf:"bytes,14,opt,name=description,proto3" json:"description,omitempty"`
	// Map of examples with example name as key.
	Examples map[string]*Example `protobuf:"bytes,15,rep,name=examples,proto3" json:"examples,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Base schema if applicable.
	BaseSchema *KclType `protobuf:"bytes,16,opt,name=base_schema,json=baseSchema,proto3" json:"base_schema,omitempty"`
}

func (x *KclType) Reset() {
	*x = KclType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spec_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KclType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KclType) ProtoMessage() {}

func (x *KclType) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KclType.ProtoReflect.Descriptor instead.
func (*KclType) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{63}
}

func (x *KclType) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *KclType) GetUnionTypes() []*KclType {
	if x != nil {
		return x.UnionTypes
	}
	return nil
}

func (x *KclType) GetDefault() string {
	if x != nil {
		return x.Default
	}
	return ""
}

func (x *KclType) GetSchemaName() string {
	if x != nil {
		return x.SchemaName
	}
	return ""
}

func (x *KclType) GetSchemaDoc() string {
	if x != nil {
		return x.SchemaDoc
	}
	return ""
}

func (x *KclType) GetProperties() map[string]*KclType {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *KclType) GetRequired() []string {
	if x != nil {
		return x.Required
	}
	return nil
}

func (x *KclType) GetKey() *KclType {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *KclType) GetItem() *KclType {
	if x != nil {
		return x.Item
	}
	return nil
}

func (x *KclType) GetLine() int32 {
	if x != nil {
		return x.Line
	}
	return 0
}

func (x *KclType) GetDecorators() []*Decorator {
	if x != nil {
		return x.Decorators
	}
	return nil
}

func (x *KclType) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *KclType) GetPkgPath() string {
	if x != nil {
		return x.PkgPath
	}
	return ""
}

func (x *KclType) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *KclType) GetExamples() map[string]*Example {
	if x != nil {
		return x.Examples
	}
	return nil
}

func (x *KclType) GetBaseSchema() *KclType {
	if x != nil {
		return x.BaseSchema
	}
	return nil
}

// Message representing a decorator in KCL.
type Decorator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the decorator.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Arguments for the decorator.
	Arguments []string `protobuf:"bytes,2,rep,name=arguments,proto3" json:"arguments,omitempty"`
	// Keyword arguments for the decorator as a map with keyword name as key.
	Keywords map[string]string `protobuf:"bytes,3,rep,name=keywords,proto3" json:"keywords,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Decorator) Reset() {
	*x = Decorator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spec_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Decorator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Decorator) ProtoMessage() {}

func (x *Decorator) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Decorator.ProtoReflect.Descriptor instead.
func (*Decorator) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{64}
}

func (x *Decorator) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Decorator) GetArguments() []string {
	if x != nil {
		return x.Arguments
	}
	return nil
}

func (x *Decorator) GetKeywords() map[string]string {
	if x != nil {
		return x.Keywords
	}
	return nil
}

// Message representing an example in KCL.
type Example struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Short description for the example.
	Summary string `protobuf:"bytes,1,opt,name=summary,proto3" json:"summary,omitempty"`
	// Long description for the example.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// Embedded literal example.
	Value string `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Example) Reset() {
	*x = Example{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spec_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Example) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Example) ProtoMessage() {}

func (x *Example) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Example.ProtoReflect.Descriptor instead.
func (*Example) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{65}
}

func (x *Example) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *Example) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Example) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

var File_spec_proto protoreflect.FileDescriptor

var file_spec_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x63, 0x6f,
	0x6d, 0x2e, 0x6b, 0x63, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x22, 0x43, 0x0a, 0x0b, 0x45, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x50, 0x6b, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x6b, 0x67, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x6b, 0x67, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x6b, 0x67, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x6b, 0x67, 0x50, 0x61, 0x74, 0x68, 0x22, 0x34,
	0x0a, 0x08, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x63, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x30, 0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x6b, 0x63, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x22, 0x44, 0x0a, 0x07, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x27, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6b, 0x63, 0x6c, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x22,
	0x21, 0x0a, 0x09, 0x50, 0x69, 0x6e, 0x67, 0x5f, 0x41, 0x72, 0x67, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x23, 0x0a, 0x0b, 0x50, 0x69, 0x6e, 0x67, 0x5f, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x11, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x41, 0x72, 0x67, 0x73, 0x22, 0x85, 0x01, 0x0a, 0x11, 0x47,
	0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x69, 0x74, 0x5f, 0x73, 0x68,
	0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x69, 0x74, 0x53, 0x68, 0x61, 0x12,
	0x21, 0x0a, 0x0c, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0x11, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x5f, 0x41, 0x72, 0x67, 0x73, 0x22, 0x3d, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x5f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x22, 0x7b, 0x0a, 0x0e, 0x50, 0x61, 0x72, 0x73, 0x65, 0x46, 0x69, 0x6c,
	0x65, 0x5f, 0x41, 0x72, 0x67, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x3d, 0x0a, 0x0d, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x70,
	0x6b, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x6b, 0x63, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x50, 0x6b, 0x67, 0x52, 0x0c, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x50, 0x6b, 0x67,
	0x73, 0x22, 0x6d, 0x0a, 0x10, 0x50, 0x61, 0x72, 0x73, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x5f, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x73, 0x74, 0x5f, 0x6a, 0x73, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x73, 0x74, 0x4a, 0x73, 0x6f, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04,
	0x64, 0x65, 0x70, 0x73, 0x12, 0x2a, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6b, 0x63, 0x6c, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x22, 0x82, 0x01, 0x0a, 0x11, 0x50, 0x61, 0x72, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61,
	0x6d, 0x5f, 0x41, 0x72, 0x67, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x74, 0x68, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x0d, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x5f, 0x70, 0x6b, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x6b, 0x63, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x50, 0x6b, 0x67, 0x52, 0x0c, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x50, 0x6b, 0x67, 0x73, 0x22, 0x72, 0x0a, 0x13, 0x50, 0x61, 0x72, 0x73, 0x65, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x19, 0x0a, 0x08,
	0x61, 0x73, 0x74, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x61, 0x73, 0x74, 0x4a, 0x73, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x74, 0x68, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x74, 0x68, 0x73, 0x12, 0x2a, 0x0a,
	0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x6b, 0x63, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0xbb, 0x01, 0x0a, 0x10, 0x4c, 0x6f,
	0x61, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x41, 0x72, 0x67, 0x73, 0x12, 0x3d,
	0x0a, 0x0a, 0x70, 0x61, 0x72, 0x73, 0x65, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6b, 0x63, 0x6c, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x50, 0x61, 0x72, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x41, 0x72,
	0x67, 0x73, 0x52, 0x09, 0x70, 0x61, 0x72, 0x73, 0x65, 0x41, 0x72, 0x67, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x5f, 0x61, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x41, 0x73, 0x74, 0x12, 0x21,
	0x0a, 0x0c, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69,
	0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x61, 0x73, 0x74, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x77, 0x69, 0x74, 0x68, 0x41,
	0x73, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xbb, 0x09, 0x0a, 0x12, 0x4c, 0x6f, 0x61, 0x64,
	0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x74, 0x68,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x74, 0x68, 0x73, 0x12, 0x35,
	0x0a, 0x0c, 0x70, 0x61, 0x72, 0x73, 0x65, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6b, 0x63, 0x6c, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x73, 0x65, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x33, 0x0a, 0x0b, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x6b, 0x63, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x0a,
	0x74, 0x79, 0x70, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x43, 0x0a, 0x06, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x6b, 0x63, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x50, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x53, 0x63, 0x6f, 0x70,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x12,
	0x46, 0x0a, 0x07, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6b, 0x63, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c,
	0x6f, 0x61, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07,
	0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x12, 0x5a, 0x0a, 0x0f, 0x6e, 0x6f, 0x64, 0x65, 0x5f,
	0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6b, 0x63, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c,
	0x6f, 0x61, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x4d, 0x61, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x4d, 0x61, 0x70, 0x12, 0x5a, 0x0a, 0x0f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x6e, 0x6f,
	0x64, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x6b, 0x63, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x50,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x53, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0d, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x61, 0x70, 0x12,
	0x73, 0x0a, 0x18, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x3a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6b, 0x63, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x4c, 0x6f, 0x61, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x2e, 0x46, 0x75, 0x6c, 0x6c, 0x79, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x4e, 0x61, 0x6d, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x15, 0x66,
	0x75, 0x6c, 0x6c, 0x79, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4e, 0x61, 0x6d,
	0x65, 0x4d, 0x61, 0x70, 0x12, 0x54, 0x0a, 0x0d, 0x70, 0x6b, 0x67, 0x5f, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x6b, 0x63, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x50, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x50, 0x6b, 0x67,
	0x53, 0x63, 0x6f, 0x70, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x70,
	0x6b, 0x67, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x4d, 0x61, 0x70, 0x1a, 0x4d, 0x0a, 0x0b, 0x53, 0x63,
	0x6f, 0x70, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x6b, 0x63, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4f, 0x0a, 0x0c, 0x53, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x6b, 0x63, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5a, 0x0a, 0x12, 0x4e, 0x6f,
	0x64, 0x65, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x2e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6b, 0x63, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x40, 0x0a, 0x12, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x62, 0x0a, 0x1a, 0x46, 0x75, 0x6c, 0x6c,
	0x79, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x4d, 0x61,
	0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6b, 0x63,
	0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x57, 0x0a, 0x10,
	0x50, 0x6b, 0x67, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6b, 0x63, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x53, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x47, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x31, 0x0a, 0x07, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x6b, 0x63, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x65, 0x6c, 0x70, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x89,
	0x01, 0x0a, 0x0a, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x65, 0x6c, 0x70, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x65, 0x6c, 0x70, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x65, 0x6c, 0x70, 0x22, 0xeb, 0x01, 0x0a, 0x06, 0x53,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x24, 0x0a, 0x02, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6b, 0x63, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x4b, 0x63, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x02, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x2e, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6b, 0x63, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12,
	0x2a, 0x0a, 0x03, 0x64, 0x65, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x6b, 0x63, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x03, 0x64, 0x65, 0x66, 0x12, 0x2e, 0x0a, 0x05, 0x61,
	0x74, 0x74, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x6b, 0x63, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x52, 0x05, 0x61, 0x74, 0x74, 0x72, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x69,
	0x73, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x69, 0x73, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x22, 0xdf, 0x01, 0x0a, 0x05, 0x53, 0x63, 0x6f,
	0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x2f, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6b, 0x63, 0x6c,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52,
	0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6b, 0x63, 0x6c,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64,
	0x72, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x6b, 0x63, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x12, 0x2c, 0x0a, 0x04,
	0x64, 0x65, 0x66, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x6b, 0x63, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x52, 0x04, 0x64, 0x65, 0x66, 0x73, 0x22, 0x3d, 0x0a, 0x0b, 0x53, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x69, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x01, 0x69, 0x12, 0x0c, 0x0a, 0x01, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x01, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x22, 0x3c, 0x0a, 0x0a, 0x53, 0x63, 0x6f,
	0x70, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x69, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x01, 0x69, 0x12, 0x0c, 0x0a, 0x01, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x01, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x22, 0xb8, 0x05, 0x0a, 0x10, 0x45, 0x78, 0x65, 0x63,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x41, 0x72, 0x67, 0x73, 0x12, 0x19, 0x0a, 0x08,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x64, 0x69, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x77, 0x6f, 0x72, 0x6b, 0x44, 0x69, 0x72, 0x12, 0x26, 0x0a, 0x0f, 0x6b, 0x5f, 0x66, 0x69, 0x6c,
	0x65, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0d, 0x6b, 0x46, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x1e, 0x0a, 0x0b, 0x6b, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x29, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x6b, 0x63, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x72, 0x67, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x76,
	0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x6f,
	0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x64, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x79, 0x61, 0x6d, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x59, 0x61,
	0x6d, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x72, 0x69, 0x6e,
	0x74, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x5f, 0x61, 0x73, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x4f, 0x76, 0x65, 0x72, 0x72,
	0x69, 0x64, 0x65, 0x41, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74,
	0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x10, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x6e, 0x6f, 0x6e, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x4e, 0x6f, 0x6e, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x62, 0x6f,
	0x73, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x62, 0x6f, 0x73,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x5f,
	0x6b, 0x65, 0x79, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x6f, 0x72, 0x74,
	0x4b, 0x65, 0x79, 0x73, 0x12, 0x3d, 0x0a, 0x0d, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x5f, 0x70, 0x6b, 0x67, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x6b, 0x63, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x50, 0x6b, 0x67, 0x52, 0x0c, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x50,
	0x6b, 0x67, 0x73, 0x12, 0x37, 0x0a, 0x18, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x54, 0x79, 0x70, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x21, 0x0a, 0x0c,
	0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x4f, 0x6e, 0x6c, 0x79, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73, 0x68, 0x6f, 0x77, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e,
	0x12, 0x23, 0x0a, 0x0d, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x11, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x61, 0x74, 0x68, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x61, 0x73, 0x74, 0x5f, 0x65, 0x76,
	0x61, 0x6c, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x66, 0x61, 0x73, 0x74, 0x45, 0x76,
	0x61, 0x6c, 0x22, 0x98, 0x01, 0x0a, 0x12, 0x45, 0x78, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x61, 0x6d, 0x5f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6a, 0x73, 0x6f,
	0x6e, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6a, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x79, 0x61,
	0x6d, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x79, 0x61, 0x6d, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6c,
	0x6f, 0x67, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x6c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x65, 0x72, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x65, 0x72, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x67, 0x0a,
	0x11, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x41, 0x72,
	0x67, 0x73, 0x12, 0x3a, 0x0a, 0x09, 0x65, 0x78, 0x65, 0x63, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6b, 0x63, 0x6c, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f,
	0x41, 0x72, 0x67, 0x73, 0x52, 0x08, 0x65, 0x78, 0x65, 0x63, 0x41, 0x72, 0x67, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x29, 0x0a, 0x13, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x22, 0x63, 0x0a, 0x11, 0x45, 0x78, 0x65, 0x63, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63,
	0x74, 0x5f, 0x41, 0x72, 0x67, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x3a, 0x0a, 0x09, 0x65, 0x78,
	0x65, 0x63, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x6b, 0x63, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x78, 0x65, 0x63,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x41, 0x72, 0x67, 0x73, 0x52, 0x08, 0x65, 0x78,
	0x65, 0x63, 0x41, 0x72, 0x67, 0x73, 0x22, 0x29, 0x0a, 0x0f, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x5f, 0x41, 0x72, 0x67, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x22, 0x31, 0x0a, 0x11, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x5f,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x74, 0x65, 0x64, 0x22, 0x25, 0x0a, 0x0f, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x50, 0x61,
	0x74, 0x68, 0x5f, 0x41, 0x72, 0x67, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0x38, 0x0a, 0x11, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x50, 0x61, 0x74, 0x68, 0x5f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x23, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64,
	0x50, 0x61, 0x74, 0x68, 0x73, 0x22, 0x25, 0x0a, 0x0d, 0x4c, 0x69, 0x6e, 0x74, 0x50, 0x61, 0x74,
	0x68, 0x5f, 0x41, 0x72, 0x67, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x74, 0x68, 0x73, 0x22, 0x2b, 0x0a, 0x0f,
	0x4c, 0x69, 0x6e, 0x74, 0x50, 0x61, 0x74, 0x68, 0x5f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x60, 0x0a, 0x11, 0x4f, 0x76, 0x65,
	0x72, 0x72, 0x69, 0x64, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x5f, 0x41, 0x72, 0x67, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x69,
	0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x70, 0x65, 0x63, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x05, 0x73, 0x70, 0x65, 0x63, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6d, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b,
	0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x61, 0x74, 0x68, 0x73, 0x22, 0x64, 0x0a, 0x13, 0x4f,
	0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x35, 0x0a, 0x0c, 0x70, 0x61,
	0x72, 0x73, 0x65, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6b, 0x63, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x22, 0x3c, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x5f, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x65,
	0x72, 0x67, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0c, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x22,
	0x43, 0x0a, 0x0c, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x33, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6b, 0x63, 0x6c, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x22, 0x7e, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x5f, 0x41, 0x72, 0x67, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69,
	0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x70, 0x65, 0x63, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x05, 0x73, 0x70, 0x65, 0x63, 0x73, 0x12, 0x3c, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6b, 0x63,
	0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x5f, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x22, 0xa3, 0x02, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x4e, 0x0a,
	0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6b, 0x63, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x2b, 0x0a,
	0x11, 0x75, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x75, 0x6e, 0x73, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x0c, 0x70, 0x61,
	0x72, 0x73, 0x65, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6b, 0x63, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x1a, 0x57, 0x0a, 0x0e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6b, 0x63, 0x6c, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc4, 0x01, 0x0a, 0x08, 0x56,
	0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x70,
	0x5f, 0x73, 0x79, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x70, 0x53, 0x79,
	0x6d, 0x12, 0x34, 0x0a, 0x0a, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6b, 0x63, 0x6c, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x09, 0x6c, 0x69,
	0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x38, 0x0a, 0x0c, 0x64, 0x69, 0x63, 0x74, 0x5f,
	0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x6b, 0x63, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x61, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x64, 0x69, 0x63, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65,
	0x73, 0x22, 0x49, 0x0a, 0x08, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x2b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6b, 0x63, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x78, 0x0a, 0x19,
	0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x5f, 0x41, 0x72, 0x67, 0x73, 0x12, 0x3a, 0x0a, 0x09, 0x65, 0x78, 0x65,
	0x63, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x6b, 0x63, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x41, 0x72, 0x67, 0x73, 0x52, 0x08, 0x65, 0x78, 0x65,
	0x63, 0x41, 0x72, 0x67, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xea, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x6f, 0x0a, 0x13, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6b, 0x63, 0x6c, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x54, 0x79, 0x70, 0x65, 0x4d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x54, 0x79, 0x70, 0x65,
	0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x1a, 0x5a, 0x0a, 0x16, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6b, 0x63, 0x6c, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x4b, 0x63, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x80, 0x02, 0x0a, 0x24, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x55, 0x6e, 0x64, 0x65,
	0x72, 0x50, 0x61, 0x74, 0x68, 0x5f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x78, 0x0a, 0x13,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x6b, 0x63, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x55, 0x6e, 0x64, 0x65,
	0x72, 0x50, 0x61, 0x74, 0x68, 0x5f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x11, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x54, 0x79, 0x70, 0x65, 0x4d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x1a, 0x5e, 0x0a, 0x16, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x54, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x2e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6b, 0x63, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x44, 0x0a, 0x0b, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x6b, 0x63, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4b, 0x63, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x54, 0x79, 0x70, 0x65, 0x22, 0xc2, 0x01, 0x0a,
	0x11, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x41, 0x72,
	0x67, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x22, 0x50, 0x0a, 0x13, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x5f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x72, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x72, 0x72, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x52, 0x0a, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x6c,
	0x69, 0x6e, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x66,
	0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66,
	0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x99, 0x01, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74,
	0x44, 0x65, 0x70, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x5f, 0x41, 0x72, 0x67, 0x73, 0x12, 0x19, 0x0a,
	0x08, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x64, 0x69, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x77, 0x6f, 0x72, 0x6b, 0x44, 0x69, 0x72, 0x12, 0x20, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x5f,
	0x61, 0x62, 0x73, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x75, 0x73, 0x65, 0x41, 0x62, 0x73, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x41, 0x6c, 0x6c, 0x12, 0x26, 0x0a, 0x0f, 0x75,
	0x73, 0x65, 0x5f, 0x66, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x46, 0x61, 0x73, 0x74, 0x50, 0x61, 0x72,
	0x73, 0x65, 0x72, 0x22, 0x5f, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x70, 0x46, 0x69,
	0x6c, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x6b,
	0x67, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x6b, 0x67,
	0x72, 0x6f, 0x6f, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x6b, 0x67, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x6b, 0x67, 0x70, 0x61, 0x74, 0x68, 0x12, 0x14,
	0x0a, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x66,
	0x69, 0x6c, 0x65, 0x73, 0x22, 0x49, 0x0a, 0x16, 0x4c, 0x6f, 0x61, 0x64, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x5f, 0x41, 0x72, 0x67, 0x73, 0x12, 0x19,
	0x0a, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x64, 0x69, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x77, 0x6f, 0x72, 0x6b, 0x44, 0x69, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x6c,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x22,
	0x96, 0x01, 0x0a, 0x18, 0x4c, 0x6f, 0x61, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x46, 0x69, 0x6c, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3e, 0x0a, 0x0f,
	0x6b, 0x63, 0x6c, 0x5f, 0x63, 0x6c, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6b, 0x63, 0x6c, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x43, 0x6c, 0x69, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0d, 0x6b,
	0x63, 0x6c, 0x43, 0x6c, 0x69, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x3a, 0x0a, 0x0b,
	0x6b, 0x63, 0x6c, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6b, 0x63, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x61, 0x69, 0x72, 0x52, 0x0a, 0x6b, 0x63,
	0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x91, 0x03, 0x0a, 0x09, 0x43, 0x6c, 0x69,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64,
	0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x61, 0x74, 0x68, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x74, 0x72, 0x69, 0x63,
	0x74, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x10, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x6e, 0x6f, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x64, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x4e, 0x6f, 0x6e, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x62,
	0x6f, 0x73, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x65, 0x72, 0x62, 0x6f,
	0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6f, 0x72, 0x74,
	0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x6f, 0x72,
	0x74, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x68, 0x69,
	0x64, 0x64, 0x65, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73, 0x68, 0x6f, 0x77,
	0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x12, 0x37, 0x0a, 0x18, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x54, 0x79, 0x70, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12,
	0x1b, 0x0a, 0x09, 0x66, 0x61, 0x73, 0x74, 0x5f, 0x65, 0x76, 0x61, 0x6c, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x66, 0x61, 0x73, 0x74, 0x45, 0x76, 0x61, 0x6c, 0x22, 0x36, 0x0a, 0x0c,
	0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x61, 0x69, 0x72, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x8b, 0x01, 0x0a, 0x0b, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x5f,
	0x41, 0x72, 0x67, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f,
	0x72, 0x6f, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69,
	0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x65, 0x77, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x77, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0x34, 0x0a, 0x0d, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x5f, 0x66,
	0x69, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x22, 0x82, 0x02, 0x0a, 0x0f, 0x52, 0x65, 0x6e,
	0x61, 0x6d, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x41, 0x72, 0x67, 0x73, 0x12, 0x21, 0x0a, 0x0c,
	0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x50, 0x61, 0x74, 0x68,
	0x12, 0x50, 0x0a, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6b, 0x63, 0x6c,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x5f,
	0x41, 0x72, 0x67, 0x73, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x65, 0x77, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x3e, 0x0a,
	0x10, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xab, 0x01,
	0x0a, 0x11, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x55, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x6b, 0x63, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x1a, 0x3f, 0x0a, 0x11, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x9e, 0x01, 0x0a, 0x09,
	0x54, 0x65, 0x73, 0x74, 0x5f, 0x41, 0x72, 0x67, 0x73, 0x12, 0x3a, 0x0a, 0x09, 0x65, 0x78, 0x65,
	0x63, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x6b, 0x63, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x41, 0x72, 0x67, 0x73, 0x52, 0x08, 0x65, 0x78, 0x65,
	0x63, 0x41, 0x72, 0x67, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x6b, 0x67, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x70, 0x6b, 0x67, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x75, 0x6e, 0x5f, 0x72, 0x65, 0x67, 0x65, 0x78, 0x70, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x75, 0x6e, 0x52, 0x65, 0x67, 0x65, 0x78, 0x70, 0x12,
	0x1b, 0x0a, 0x09, 0x66, 0x61, 0x69, 0x6c, 0x5f, 0x66, 0x61, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x66, 0x61, 0x69, 0x6c, 0x46, 0x61, 0x73, 0x74, 0x22, 0x3c, 0x0a, 0x0b,
	0x54, 0x65, 0x73, 0x74, 0x5f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2d, 0x0a, 0x04, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x6b, 0x63, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x75, 0x0a, 0x0c, 0x54, 0x65,
	0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f, 0x67, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0x56, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x70, 0x65, 0x6e,
	0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x5f, 0x41, 0x72, 0x67, 0x73, 0x12, 0x23, 0x0a, 0x0d,
	0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x50, 0x61, 0x74,
	0x68, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x22, 0x5a, 0x0a, 0x19, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x5f,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3d, 0x0a, 0x0d, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x5f, 0x70, 0x6b, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x6b, 0x63, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x50, 0x6b, 0x67, 0x52, 0x0c, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x50, 0x6b, 0x67, 0x73, 0x22, 0xa6, 0x06, 0x0a, 0x07, 0x4b, 0x63, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x35, 0x0a, 0x0b, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x6b, 0x63, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4b, 0x63, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0a, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x5f, 0x64, 0x6f, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x44, 0x6f, 0x63, 0x12, 0x44, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x6b, 0x63, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4b, 0x63, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6b, 0x63, 0x6c, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x4b, 0x63, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x28, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6b, 0x63, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4b, 0x63, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69,
	0x6e, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x36,
	0x0a, 0x0a, 0x64, 0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x0b, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6b, 0x63, 0x6c, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x44, 0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x0a, 0x64, 0x65, 0x63, 0x6f,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x6b, 0x67, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x6b, 0x67, 0x50, 0x61, 0x74, 0x68, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x3e, 0x0a, 0x08, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6b, 0x63, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x4b, 0x63, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x12,
	0x35, 0x0a, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6b, 0x63, 0x6c, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x4b, 0x63, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x62, 0x61, 0x73, 0x65,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x1a, 0x53, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x6b, 0x63, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4b, 0x63, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x51, 0x0a, 0x0d, 0x45,
	0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x6b, 0x63, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x78, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xbc,
	0x01, 0x0a, 0x09, 0x44, 0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x40,
	0x0a, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6b, 0x63, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44,
	0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73,
	0x1a, 0x3b, 0x0a, 0x0d, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x5b, 0x0a,
	0x07, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x32, 0x96, 0x01, 0x0a, 0x0e, 0x42,
	0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x38, 0x0a,
	0x04, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6b, 0x63, 0x6c, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x5f, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x18, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x6b, 0x63, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x69, 0x6e, 0x67,
	0x5f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x4a, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x1c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6b, 0x63, 0x6c, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x41,
	0x72, 0x67, 0x73, 0x1a, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6b, 0x63, 0x6c, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x32, 0xda, 0x0e, 0x0a, 0x0c, 0x4b, 0x63, 0x6c, 0x76, 0x6d, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x6b, 0x63, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x5f,
	0x41, 0x72, 0x67, 0x73, 0x1a, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6b, 0x63, 0x6c, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x5f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x4a,
	0x0a, 0x0a, 0x47, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x6b, 0x63, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x1e, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x6b, 0x63, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x50, 0x0a, 0x0c, 0x50, 0x61,
	0x72, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x1e, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x6b, 0x63, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x72, 0x73, 0x65, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x20, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x6b, 0x63, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x72, 0x73, 0x65, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x47, 0x0a, 0x09,
	0x50, 0x61, 0x72, 0x73, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x1b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x6b, 0x63, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x72, 0x73, 0x65, 0x46, 0x69, 0x6c,
	0x65, 0x5f, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6b, 0x63, 0x6c,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x72, 0x73, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x5f, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x4d, 0x0a, 0x0b, 0x4c, 0x6f, 0x61, 0x64, 0x50, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6b, 0x63, 0x6c, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x41,
	0x72, 0x67, 0x73, 0x1a, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6b, 0x63, 0x6c, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x4e, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6b, 0x63, 0x6c, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x50, 0x61, 0x72, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x41,
	0x72, 0x67, 0x73, 0x1a, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6b, 0x63, 0x6c, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x53, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6b, 0x63, 0x6c, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x5f, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6b, 0x63, 0x6c,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x4d, 0x0a, 0x0b, 0x45, 0x78, 0x65,
	0x63, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6b,
	0x63, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x61, 0x6d, 0x5f, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6b, 0x63,
	0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61,
	0x6d, 0x5f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x50, 0x0a, 0x0c, 0x42, 0x75, 0x69, 0x6c,
	0x64, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6b,
	0x63, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x61, 0x6d, 0x5f, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6b,
	0x63, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x61, 0x6d, 0x5f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x4f, 0x0a, 0x0c, 0x45, 0x78,
	0x65, 0x63, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x12, 0x1e, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x6b, 0x63, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x41, 0x72, 0x74,
	0x69, 0x66, 0x61, 0x63, 0x74, 0x5f, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x1f, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x6b, 0x63, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x50, 0x72, 0x6f,
	0x67, 0x72, 0x61, 0x6d, 0x5f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x50, 0x0a, 0x0c, 0x4f,
	0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x1e, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x6b, 0x63, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69,
	0x64, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x5f, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x20, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x6b, 0x63, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69,
	0x64, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x68, 0x0a,
	0x14, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6b, 0x63, 0x6c, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x54, 0x79, 0x70,
	0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x28, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x6b, 0x63, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x5f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x7a, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x55,
	0x6e, 0x64, 0x65, 0x72, 0x50, 0x61, 0x74, 0x68, 0x12, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6b,
	0x63, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x54, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x41, 0x72, 0x67, 0x73,
	0x1a, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6b, 0x63, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47,
	0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x50, 0x61, 0x74, 0x68, 0x5f, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x4a, 0x0a, 0x0a, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x1c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6b, 0x63, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x41, 0x72, 0x67, 0x73, 0x1a,
	0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6b, 0x63, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x4a, 0x0a, 0x0a, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1c, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x6b, 0x63, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x50, 0x61, 0x74, 0x68, 0x5f, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x1e, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x6b, 0x63, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x50, 0x61, 0x74, 0x68, 0x5f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x44, 0x0a, 0x08, 0x4c,
	0x69, 0x6e, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6b, 0x63,
	0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x6e, 0x74, 0x50, 0x61, 0x74, 0x68, 0x5f, 0x41,
	0x72, 0x67, 0x73, 0x1a, 0x1c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6b, 0x63, 0x6c, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x4c, 0x69, 0x6e, 0x74, 0x50, 0x61, 0x74, 0x68, 0x5f, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x50, 0x0a, 0x0c, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6b, 0x63, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x41, 0x72, 0x67,
	0x73, 0x1a, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6b, 0x63, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x50, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x70, 0x46, 0x69,
	0x6c, 0x65, 0x73, 0x12, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6b, 0x63, 0x6c, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x70, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x5f, 0x41,
	0x72, 0x67, 0x73, 0x1a, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6b, 0x63, 0x6c, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x70, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x5f, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x5f, 0x0a, 0x11, 0x4c, 0x6f, 0x61, 0x64, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x23, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x6b, 0x63, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x5f, 0x41, 0x72, 0x67, 0x73, 0x1a,
	0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6b, 0x63, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x6f,
	0x61, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x5f,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3e, 0x0a, 0x06, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6b, 0x63, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52,
	0x65, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x1a, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x6b, 0x63, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x5f,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x4a, 0x0a, 0x0a, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6b, 0x63, 0x6c, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x41, 0x72,
	0x67, 0x73, 0x1a, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6b, 0x63, 0x6c, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x38, 0x0a, 0x04, 0x54, 0x65, 0x73, 0x74, 0x12, 0x16, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x6b, 0x63, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x5f, 0x41, 0x72,
	0x67, 0x73, 0x1a, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6b, 0x63, 0x6c, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x54, 0x65, 0x73, 0x74, 0x5f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x62, 0x0a, 0x12,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69,
	0x65, 0x73, 0x12, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6b, 0x63, 0x6c, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63,
	0x69, 0x65, 0x73, 0x5f, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6b,
	0x63, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x70,
	0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x42, 0x14, 0x5a, 0x05, 0x2e, 0x3b, 0x61, 0x70, 0x69, 0xaa, 0x02, 0x0a, 0x4b, 0x63, 0x6c, 0x4c,
	0x69, 0x62, 0x2e, 0x41, 0x50, 0x49, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_spec_proto_rawDescOnce sync.Once
	file_spec_proto_rawDescData = file_spec_proto_rawDesc
)

func file_spec_proto_rawDescGZIP() []byte {
	file_spec_proto_rawDescOnce.Do(func() {
		file_spec_proto_rawDescData = protoimpl.X.CompressGZIP(file_spec_proto_rawDescData)
	})
	return file_spec_proto_rawDescData
}

var file_spec_proto_msgTypes = make([]protoimpl.MessageInfo, 80)
var file_spec_proto_goTypes = []any{
	(*ExternalPkg)(nil),                          // 0: com.kcl.api.ExternalPkg
	(*Argument)(nil),                             // 1: com.kcl.api.Argument
	(*Error)(nil),                                // 2: com.kcl.api.Error
	(*Message)(nil),                              // 3: com.kcl.api.Message
	(*Ping_Args)(nil),                            // 4: com.kcl.api.Ping_Args
	(*Ping_Result)(nil),                          // 5: com.kcl.api.Ping_Result
	(*GetVersion_Args)(nil),                      // 6: com.kcl.api.GetVersion_Args
	(*GetVersion_Result)(nil),                    // 7: com.kcl.api.GetVersion_Result
	(*ListMethod_Args)(nil),                      // 8: com.kcl.api.ListMethod_Args
	(*ListMethod_Result)(nil),                    // 9: com.kcl.api.ListMethod_Result
	(*ParseFile_Args)(nil),                       // 10: com.kcl.api.ParseFile_Args
	(*ParseFile_Result)(nil),                     // 11: com.kcl.api.ParseFile_Result
	(*ParseProgram_Args)(nil),                    // 12: com.kcl.api.ParseProgram_Args
	(*ParseProgram_Result)(nil),                  // 13: com.kcl.api.ParseProgram_Result
	(*LoadPackage_Args)(nil),                     // 14: com.kcl.api.LoadPackage_Args
	(*LoadPackage_Result)(nil),                   // 15: com.kcl.api.LoadPackage_Result
	(*ListOptions_Result)(nil),                   // 16: com.kcl.api.ListOptions_Result
	(*OptionHelp)(nil),                           // 17: com.kcl.api.OptionHelp
	(*Symbol)(nil),                               // 18: com.kcl.api.Symbol
	(*Scope)(nil),                                // 19: com.kcl.api.Scope
	(*SymbolIndex)(nil),                          // 20: com.kcl.api.SymbolIndex
	(*ScopeIndex)(nil),                           // 21: com.kcl.api.ScopeIndex
	(*ExecProgram_Args)(nil),                     // 22: com.kcl.api.ExecProgram_Args
	(*ExecProgram_Result)(nil),                   // 23: com.kcl.api.ExecProgram_Result
	(*BuildProgram_Args)(nil),                    // 24: com.kcl.api.BuildProgram_Args
	(*BuildProgram_Result)(nil),                  // 25: com.kcl.api.BuildProgram_Result
	(*ExecArtifact_Args)(nil),                    // 26: com.kcl.api.ExecArtifact_Args
	(*FormatCode_Args)(nil),                      // 27: com.kcl.api.FormatCode_Args
	(*FormatCode_Result)(nil),                    // 28: com.kcl.api.FormatCode_Result
	(*FormatPath_Args)(nil),                      // 29: com.kcl.api.FormatPath_Args
	(*FormatPath_Result)(nil),                    // 30: com.kcl.api.FormatPath_Result
	(*LintPath_Args)(nil),                        // 31: com.kcl.api.LintPath_Args
	(*LintPath_Result)(nil),                      // 32: com.kcl.api.LintPath_Result
	(*OverrideFile_Args)(nil),                    // 33: com.kcl.api.OverrideFile_Args
	(*OverrideFile_Result)(nil),                  // 34: com.kcl.api.OverrideFile_Result
	(*ListVariables_Options)(nil),                // 35: com.kcl.api.ListVariables_Options
	(*VariableList)(nil),                         // 36: com.kcl.api.VariableList
	(*ListVariables_Args)(nil),                   // 37: com.kcl.api.ListVariables_Args
	(*ListVariables_Result)(nil),                 // 38: com.kcl.api.ListVariables_Result
	(*Variable)(nil),                             // 39: com.kcl.api.Variable
	(*MapEntry)(nil),                             // 40: com.kcl.api.MapEntry
	(*GetSchemaTypeMapping_Args)(nil),            // 41: com.kcl.api.GetSchemaTypeMapping_Args
	(*GetSchemaTypeMapping_Result)(nil),          // 42: com.kcl.api.GetSchemaTypeMapping_Result
	(*GetSchemaTypeMappingUnderPath_Result)(nil), // 43: com.kcl.api.GetSchemaTypeMappingUnderPath_Result
	(*SchemaTypes)(nil),                          // 44: com.kcl.api.SchemaTypes
	(*ValidateCode_Args)(nil),                    // 45: com.kcl.api.ValidateCode_Args
	(*ValidateCode_Result)(nil),                  // 46: com.kcl.api.ValidateCode_Result
	(*Position)(nil),                             // 47: com.kcl.api.Position
	(*ListDepFiles_Args)(nil),                    // 48: com.kcl.api.ListDepFiles_Args
	(*ListDepFiles_Result)(nil),                  // 49: com.kcl.api.ListDepFiles_Result
	(*LoadSettingsFiles_Args)(nil),               // 50: com.kcl.api.LoadSettingsFiles_Args
	(*LoadSettingsFiles_Result)(nil),             // 51: com.kcl.api.LoadSettingsFiles_Result
	(*CliConfig)(nil),                            // 52: com.kcl.api.CliConfig
	(*KeyValuePair)(nil),                         // 53: com.kcl.api.KeyValuePair
	(*Rename_Args)(nil),                          // 54: com.kcl.api.Rename_Args
	(*Rename_Result)(nil),                        // 55: com.kcl.api.Rename_Result
	(*RenameCode_Args)(nil),                      // 56: com.kcl.api.RenameCode_Args
	(*RenameCode_Result)(nil),                    // 57: com.kcl.api.RenameCode_Result
	(*Test_Args)(nil),                            // 58: com.kcl.api.Test_Args
	(*Test_Result)(nil),                          // 59: com.kcl.api.Test_Result
	(*TestCaseInfo)(nil),                         // 60: com.kcl.api.TestCaseInfo
	(*UpdateDependencies_Args)(nil),              // 61: com.kcl.api.UpdateDependencies_Args
	(*UpdateDependencies_Result)(nil),            // 62: com.kcl.api.UpdateDependencies_Result
	(*KclType)(nil),                              // 63: com.kcl.api.KclType
	(*Decorator)(nil),                            // 64: com.kcl.api.Decorator
	(*Example)(nil),                              // 65: com.kcl.api.Example
	nil,                                          // 66: com.kcl.api.LoadPackage_Result.ScopesEntry
	nil,                                          // 67: com.kcl.api.LoadPackage_Result.SymbolsEntry
	nil,                                          // 68: com.kcl.api.LoadPackage_Result.NodeSymbolMapEntry
	nil,                                          // 69: com.kcl.api.LoadPackage_Result.SymbolNodeMapEntry
	nil,                                          // 70: com.kcl.api.LoadPackage_Result.FullyQualifiedNameMapEntry
	nil,                                          // 71: com.kcl.api.LoadPackage_Result.PkgScopeMapEntry
	nil,                                          // 72: com.kcl.api.ListVariables_Result.VariablesEntry
	nil,                                          // 73: com.kcl.api.GetSchemaTypeMapping_Result.SchemaTypeMappingEntry
	nil,                                          // 74: com.kcl.api.GetSchemaTypeMappingUnderPath_Result.SchemaTypeMappingEntry
	nil,                                          // 75: com.kcl.api.RenameCode_Args.SourceCodesEntry
	nil,                                          // 76: com.kcl.api.RenameCode_Result.ChangedCodesEntry
	nil,                                          // 77: com.kcl.api.KclType.PropertiesEntry
	nil,                                          // 78: com.kcl.api.KclType.ExamplesEntry
	nil,                                          // 79: com.kcl.api.Decorator.KeywordsEntry
}
var file_spec_proto_depIdxs = []int32{
	3,  // 0: com.kcl.api.Error.messages:type_name -> com.kcl.api.Message
	47, // 1: com.kcl.api.Message.pos:type_name -> com.kcl.api.Position
	0,  // 2: com.kcl.api.ParseFile_Args.external_pkgs:type_name -> com.kcl.api.ExternalPkg
	2,  // 3: com.kcl.api.ParseFile_Result.errors:type_name -> com.kcl.api.Error
	0,  // 4: com.kcl.api.ParseProgram_Args.external_pkgs:type_name -> com.kcl.api.ExternalPkg
	2,  // 5: com.kcl.api.ParseProgram_Result.errors:type_name -> com.kcl.api.Error
	12, // 6: com.kcl.api.LoadPackage_Args.parse_args:type_name -> com.kcl.api.ParseProgram_Args
	2,  // 7: com.kcl.api.LoadPackage_Result.parse_errors:type_name -> com.kcl.api.Error
	2,  // 8: com.kcl.api.LoadPackage_Result.type_errors:type_name -> com.kcl.api.Error
	66, // 9: com.kcl.api.LoadPackage_Result.scopes:type_name -> com.kcl.api.LoadPackage_Result.ScopesEntry
	67, // 10: com.kcl.api.LoadPackage_Result.symbols:type_name -> com.kcl.api.LoadPackage_Result.SymbolsEntry
	68, // 11: com.kcl.api.LoadPackage_Result.node_symbol_map:type_name -> com.kcl.api.LoadPackage_Result.NodeSymbolMapEntry
	69, // 12: com.kcl.api.LoadPackage_Result.symbol_node_map:type_name -> com.kcl.api.LoadPackage_Result.SymbolNodeMapEntry
	70, // 13: com.kcl.api.LoadPackage_Result.fully_qualified_name_map:type_name -> com.kcl.api.LoadPackage_Result.FullyQualifiedNameMapEntry
	71, // 14: com.kcl.api.LoadPackage_Result.pkg_scope_map:type_name -> com.kcl.api.LoadPackage_Result.PkgScopeMapEntry
	17, // 15: com.kcl.api.ListOptions_Result.options:type_name -> com.kcl.api.OptionHelp
	63, // 16: com.kcl.api.Symbol.ty:type_name -> com.kcl.api.KclType
	20, // 17: com.kcl.api.Symbol.owner:type_name -> com.kcl.api.SymbolIndex
	20, // 18: com.kcl.api.Symbol.def:type_name -> com.kcl.api.SymbolIndex
	20, // 19: com.kcl.api.Symbol.attrs:type_name -> com.kcl.api.SymbolIndex
	21, // 20: com.kcl.api.Scope.parent:type_name -> com.kcl.api.ScopeIndex
	20, // 21: com.kcl.api.Scope.owner:type_name -> com.kcl.api.SymbolIndex
	21, // 22: com.kcl.api.Scope.children:type_name -> com.kcl.api.ScopeIndex
	20, // 23: com.kcl.api.Scope.defs:type_name -> com.kcl.api.SymbolIndex
	1,  // 24: com.kcl.api.ExecProgram_Args.args:type_name -> com.kcl.api.Argument
	0,  // 25: com.kcl.api.ExecProgram_Args.external_pkgs:type_name -> com.kcl.api.ExternalPkg
	22, // 26: com.kcl.api.BuildProgram_Args.exec_args:type_name -> com.kcl.api.ExecProgram_Args
	22, // 27: com.kcl.api.ExecArtifact_Args.exec_args:type_name -> com.kcl.api.ExecProgram_Args
	2,  // 28: com.kcl.api.OverrideFile_Result.parse_errors:type_name -> com.kcl.api.Error
	39, // 29: com.kcl.api.VariableList.variables:type_name -> com.kcl.api.Variable
	35, // 30: com.kcl.api.ListVariables_Args.options:type_name -> com.kcl.api.ListVariables_Options
	72, // 31: com.kcl.api.ListVariables_Result.variables:type_name -> com.kcl.api.ListVariables_Result.VariablesEntry
	2,  // 32: com.kcl.api.ListVariables_Result.parse_errors:type_name -> com.kcl.api.Error
	39, // 33: com.kcl.api.Variable.list_items:type_name -> com.kcl.api.Variable
	40, // 34: com.kcl.api.Variable.dict_entries:type_name -> com.kcl.api.MapEntry
	39, // 35: com.kcl.api.MapEntry.value:type_name -> com.kcl.api.Variable
	22, // 36: com.kcl.api.GetSchemaTypeMapping_Args.exec_args:type_name -> com.kcl.api.ExecProgram_Args
	73, // 37: com.kcl.api.GetSchemaTypeMapping_Result.schema_type_mapping:type_name -> com.kcl.api.GetSchemaTypeMapping_Result.SchemaTypeMappingEntry
	74, // 38: com.kcl.api.GetSchemaTypeMappingUnderPath_Result.schema_type_mapping:type_name -> com.kcl.api.GetSchemaTypeMappingUnderPath_Result.SchemaTypeMappingEntry
	63, // 39: com.kcl.api.SchemaTypes.schema_type:type_name -> com.kcl.api.KclType
	52, // 40: com.kcl.api.LoadSettingsFiles_Result.kcl_cli_configs:type_name -> com.kcl.api.CliConfig
	53, // 41: com.kcl.api.LoadSettingsFiles_Result.kcl_options:type_name -> com.kcl.api.KeyValuePair
	75, // 42: com.kcl.api.RenameCode_Args.source_codes:type_name -> com.kcl.api.RenameCode_Args.SourceCodesEntry
	76, // 43: com.kcl.api.RenameCode_Result.changed_codes:type_name -> com.kcl.api.RenameCode_Result.ChangedCodesEntry
	22, // 44: com.kcl.api.Test_Args.exec_args:type_name -> com.kcl.api.ExecProgram_Args
	60, // 45: com.kcl.api.Test_Result.info:type_name -> com.kcl.api.TestCaseInfo
	0,  // 46: com.kcl.api.UpdateDependencies_Result.external_pkgs:type_name -> com.kcl.api.ExternalPkg
	63, // 47: com.kcl.api.KclType.union_types:type_name -> com.kcl.api.KclType
	77, // 48: com.kcl.api.KclType.properties:type_name -> com.kcl.api.KclType.PropertiesEntry
	63, // 49: com.kcl.api.KclType.key:type_name -> com.kcl.api.KclType
	63, // 50: com.kcl.api.KclType.item:type_name -> com.kcl.api.KclType
	64, // 51: com.kcl.api.KclType.decorators:type_name -> com.kcl.api.Decorator
	78, // 52: com.kcl.api.KclType.examples:type_name -> com.kcl.api.KclType.ExamplesEntry
	63, // 53: com.kcl.api.KclType.base_schema:type_name -> com.kcl.api.KclType
	79, // 54: com.kcl.api.Decorator.keywords:type_name -> com.kcl.api.Decorator.KeywordsEntry
	19, // 55: com.kcl.api.LoadPackage_Result.ScopesEntry.value:type_name -> com.kcl.api.Scope
	18, // 56: com.kcl.api.LoadPackage_Result.SymbolsEntry.value:type_name -> com.kcl.api.Symbol
	20, // 57: com.kcl.api.LoadPackage_Result.NodeSymbolMapEntry.value:type_name -> com.kcl.api.SymbolIndex
	20, // 58: com.kcl.api.LoadPackage_Result.FullyQualifiedNameMapEntry.value:type_name -> com.kcl.api.SymbolIndex
	21, // 59: com.kcl.api.LoadPackage_Result.PkgScopeMapEntry.value:type_name -> com.kcl.api.ScopeIndex
	36, // 60: com.kcl.api.ListVariables_Result.VariablesEntry.value:type_name -> com.kcl.api.VariableList
	63, // 61: com.kcl.api.GetSchemaTypeMapping_Result.SchemaTypeMappingEntry.value:type_name -> com.kcl.api.KclType
	44, // 62: com.kcl.api.GetSchemaTypeMappingUnderPath_Result.SchemaTypeMappingEntry.value:type_name -> com.kcl.api.SchemaTypes
	63, // 63: com.kcl.api.KclType.PropertiesEntry.value:type_name -> com.kcl.api.KclType
	65, // 64: com.kcl.api.KclType.ExamplesEntry.value:type_name -> com.kcl.api.Example
	4,  // 65: com.kcl.api.BuiltinService.Ping:input_type -> com.kcl.api.Ping_Args
	8,  // 66: com.kcl.api.BuiltinService.ListMethod:input_type -> com.kcl.api.ListMethod_Args
	4,  // 67: com.kcl.api.KclvmService.Ping:input_type -> com.kcl.api.Ping_Args
	6,  // 68: com.kcl.api.KclvmService.GetVersion:input_type -> com.kcl.api.GetVersion_Args
	12, // 69: com.kcl.api.KclvmService.ParseProgram:input_type -> com.kcl.api.ParseProgram_Args
	10, // 70: com.kcl.api.KclvmService.ParseFile:input_type -> com.kcl.api.ParseFile_Args
	14, // 71: com.kcl.api.KclvmService.LoadPackage:input_type -> com.kcl.api.LoadPackage_Args
	12, // 72: com.kcl.api.KclvmService.ListOptions:input_type -> com.kcl.api.ParseProgram_Args
	37, // 73: com.kcl.api.KclvmService.ListVariables:input_type -> com.kcl.api.ListVariables_Args
	22, // 74: com.kcl.api.KclvmService.ExecProgram:input_type -> com.kcl.api.ExecProgram_Args
	24, // 75: com.kcl.api.KclvmService.BuildProgram:input_type -> com.kcl.api.BuildProgram_Args
	26, // 76: com.kcl.api.KclvmService.ExecArtifact:input_type -> com.kcl.api.ExecArtifact_Args
	33, // 77: com.kcl.api.KclvmService.OverrideFile:input_type -> com.kcl.api.OverrideFile_Args
	41, // 78: com.kcl.api.KclvmService.GetSchemaTypeMapping:input_type -> com.kcl.api.GetSchemaTypeMapping_Args
	41, // 79: com.kcl.api.KclvmService.GetSchemaTypeMappingUnderPath:input_type -> com.kcl.api.GetSchemaTypeMapping_Args
	27, // 80: com.kcl.api.KclvmService.FormatCode:input_type -> com.kcl.api.FormatCode_Args
	29, // 81: com.kcl.api.KclvmService.FormatPath:input_type -> com.kcl.api.FormatPath_Args
	31, // 82: com.kcl.api.KclvmService.LintPath:input_type -> com.kcl.api.LintPath_Args
	45, // 83: com.kcl.api.KclvmService.ValidateCode:input_type -> com.kcl.api.ValidateCode_Args
	48, // 84: com.kcl.api.KclvmService.ListDepFiles:input_type -> com.kcl.api.ListDepFiles_Args
	50, // 85: com.kcl.api.KclvmService.LoadSettingsFiles:input_type -> com.kcl.api.LoadSettingsFiles_Args
	54, // 86: com.kcl.api.KclvmService.Rename:input_type -> com.kcl.api.Rename_Args
	56, // 87: com.kcl.api.KclvmService.RenameCode:input_type -> com.kcl.api.RenameCode_Args
	58, // 88: com.kcl.api.KclvmService.Test:input_type -> com.kcl.api.Test_Args
	61, // 89: com.kcl.api.KclvmService.UpdateDependencies:input_type -> com.kcl.api.UpdateDependencies_Args
	5,  // 90: com.kcl.api.BuiltinService.Ping:output_type -> com.kcl.api.Ping_Result
	9,  // 91: com.kcl.api.BuiltinService.ListMethod:output_type -> com.kcl.api.ListMethod_Result
	5,  // 92: com.kcl.api.KclvmService.Ping:output_type -> com.kcl.api.Ping_Result
	7,  // 93: com.kcl.api.KclvmService.GetVersion:output_type -> com.kcl.api.GetVersion_Result
	13, // 94: com.kcl.api.KclvmService.ParseProgram:output_type -> com.kcl.api.ParseProgram_Result
	11, // 95: com.kcl.api.KclvmService.ParseFile:output_type -> com.kcl.api.ParseFile_Result
	15, // 96: com.kcl.api.KclvmService.LoadPackage:output_type -> com.kcl.api.LoadPackage_Result
	16, // 97: com.kcl.api.KclvmService.ListOptions:output_type -> com.kcl.api.ListOptions_Result
	38, // 98: com.kcl.api.KclvmService.ListVariables:output_type -> com.kcl.api.ListVariables_Result
	23, // 99: com.kcl.api.KclvmService.ExecProgram:output_type -> com.kcl.api.ExecProgram_Result
	25, // 100: com.kcl.api.KclvmService.BuildProgram:output_type -> com.kcl.api.BuildProgram_Result
	23, // 101: com.kcl.api.KclvmService.ExecArtifact:output_type -> com.kcl.api.ExecProgram_Result
	34, // 102: com.kcl.api.KclvmService.OverrideFile:output_type -> com.kcl.api.OverrideFile_Result
	42, // 103: com.kcl.api.KclvmService.GetSchemaTypeMapping:output_type -> com.kcl.api.GetSchemaTypeMapping_Result
	43, // 104: com.kcl.api.KclvmService.GetSchemaTypeMappingUnderPath:output_type -> com.kcl.api.GetSchemaTypeMappingUnderPath_Result
	28, // 105: com.kcl.api.KclvmService.FormatCode:output_type -> com.kcl.api.FormatCode_Result
	30, // 106: com.kcl.api.KclvmService.FormatPath:output_type -> com.kcl.api.FormatPath_Result
	32, // 107: com.kcl.api.KclvmService.LintPath:output_type -> com.kcl.api.LintPath_Result
	46, // 108: com.kcl.api.KclvmService.ValidateCode:output_type -> com.kcl.api.ValidateCode_Result
	49, // 109: com.kcl.api.KclvmService.ListDepFiles:output_type -> com.kcl.api.ListDepFiles_Result
	51, // 110: com.kcl.api.KclvmService.LoadSettingsFiles:output_type -> com.kcl.api.LoadSettingsFiles_Result
	55, // 111: com.kcl.api.KclvmService.Rename:output_type -> com.kcl.api.Rename_Result
	57, // 112: com.kcl.api.KclvmService.RenameCode:output_type -> com.kcl.api.RenameCode_Result
	59, // 113: com.kcl.api.KclvmService.Test:output_type -> com.kcl.api.Test_Result
	62, // 114: com.kcl.api.KclvmService.UpdateDependencies:output_type -> com.kcl.api.UpdateDependencies_Result
	90, // [90:115] is the sub-list for method output_type
	65, // [65:90] is the sub-list for method input_type
	65, // [65:65] is the sub-list for extension type_name
	65, // [65:65] is the sub-list for extension extendee
	0,  // [0:65] is the sub-list for field type_name
}

func init() { file_spec_proto_init() }
func file_spec_proto_init() {
	if File_spec_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_spec_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*ExternalPkg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spec_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*Argument); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spec_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*Error); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spec_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spec_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*Ping_Args); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spec_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*Ping_Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spec_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*GetVersion_Args); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spec_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*GetVersion_Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spec_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*ListMethod_Args); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spec_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*ListMethod_Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spec_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*ParseFile_Args); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spec_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*ParseFile_Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spec_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*ParseProgram_Args); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spec_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*ParseProgram_Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spec_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*LoadPackage_Args); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spec_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*LoadPackage_Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spec_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*ListOptions_Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spec_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*OptionHelp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spec_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*Symbol); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spec_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*Scope); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spec_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*SymbolIndex); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spec_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*ScopeIndex); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spec_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*ExecProgram_Args); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spec_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*ExecProgram_Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spec_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*BuildProgram_Args); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spec_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*BuildProgram_Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spec_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*ExecArtifact_Args); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spec_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*FormatCode_Args); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spec_proto_msgTypes[28].Exporter = func(v any, i int) any {
			switch v := v.(*FormatCode_Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spec_proto_msgTypes[29].Exporter = func(v any, i int) any {
			switch v := v.(*FormatPath_Args); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spec_proto_msgTypes[30].Exporter = func(v any, i int) any {
			switch v := v.(*FormatPath_Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spec_proto_msgTypes[31].Exporter = func(v any, i int) any {
			switch v := v.(*LintPath_Args); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spec_proto_msgTypes[32].Exporter = func(v any, i int) any {
			switch v := v.(*LintPath_Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spec_proto_msgTypes[33].Exporter = func(v any, i int) any {
			switch v := v.(*OverrideFile_Args); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spec_proto_msgTypes[34].Exporter = func(v any, i int) any {
			switch v := v.(*OverrideFile_Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spec_proto_msgTypes[35].Exporter = func(v any, i int) any {
			switch v := v.(*ListVariables_Options); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spec_proto_msgTypes[36].Exporter = func(v any, i int) any {
			switch v := v.(*VariableList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spec_proto_msgTypes[37].Exporter = func(v any, i int) any {
			switch v := v.(*ListVariables_Args); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spec_proto_msgTypes[38].Exporter = func(v any, i int) any {
			switch v := v.(*ListVariables_Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spec_proto_msgTypes[39].Exporter = func(v any, i int) any {
			switch v := v.(*Variable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spec_proto_msgTypes[40].Exporter = func(v any, i int) any {
			switch v := v.(*MapEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spec_proto_msgTypes[41].Exporter = func(v any, i int) any {
			switch v := v.(*GetSchemaTypeMapping_Args); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spec_proto_msgTypes[42].Exporter = func(v any, i int) any {
			switch v := v.(*GetSchemaTypeMapping_Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spec_proto_msgTypes[43].Exporter = func(v any, i int) any {
			switch v := v.(*GetSchemaTypeMappingUnderPath_Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spec_proto_msgTypes[44].Exporter = func(v any, i int) any {
			switch v := v.(*SchemaTypes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spec_proto_msgTypes[45].Exporter = func(v any, i int) any {
			switch v := v.(*ValidateCode_Args); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spec_proto_msgTypes[46].Exporter = func(v any, i int) any {
			switch v := v.(*ValidateCode_Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spec_proto_msgTypes[47].Exporter = func(v any, i int) any {
			switch v := v.(*Position); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spec_proto_msgTypes[48].Exporter = func(v any, i int) any {
			switch v := v.(*ListDepFiles_Args); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spec_proto_msgTypes[49].Exporter = func(v any, i int) any {
			switch v := v.(*ListDepFiles_Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spec_proto_msgTypes[50].Exporter = func(v any, i int) any {
			switch v := v.(*LoadSettingsFiles_Args); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spec_proto_msgTypes[51].Exporter = func(v any, i int) any {
			switch v := v.(*LoadSettingsFiles_Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spec_proto_msgTypes[52].Exporter = func(v any, i int) any {
			switch v := v.(*CliConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spec_proto_msgTypes[53].Exporter = func(v any, i int) any {
			switch v := v.(*KeyValuePair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spec_proto_msgTypes[54].Exporter = func(v any, i int) any {
			switch v := v.(*Rename_Args); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spec_proto_msgTypes[55].Exporter = func(v any, i int) any {
			switch v := v.(*Rename_Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spec_proto_msgTypes[56].Exporter = func(v any, i int) any {
			switch v := v.(*RenameCode_Args); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spec_proto_msgTypes[57].Exporter = func(v any, i int) any {
			switch v := v.(*RenameCode_Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spec_proto_msgTypes[58].Exporter = func(v any, i int) any {
			switch v := v.(*Test_Args); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spec_proto_msgTypes[59].Exporter = func(v any, i int) any {
			switch v := v.(*Test_Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spec_proto_msgTypes[60].Exporter = func(v any, i int) any {
			switch v := v.(*TestCaseInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spec_proto_msgTypes[61].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateDependencies_Args); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spec_proto_msgTypes[62].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateDependencies_Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spec_proto_msgTypes[63].Exporter = func(v any, i int) any {
			switch v := v.(*KclType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spec_proto_msgTypes[64].Exporter = func(v any, i int) any {
			switch v := v.(*Decorator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spec_proto_msgTypes[65].Exporter = func(v any, i int) any {
			switch v := v.(*Example); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_spec_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   80,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_spec_proto_goTypes,
		DependencyIndexes: file_spec_proto_depIdxs,
		MessageInfos:      file_spec_proto_msgTypes,
	}.Build()
	File_spec_proto = out.File
	file_spec_proto_rawDesc = nil
	file_spec_proto_goTypes = nil
	file_spec_proto_depIdxs = nil
}
